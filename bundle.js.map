{"version":3,"file":"bundle.js","mappings":"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I,IAE5C,OADA6J,EAAMG,MAAMhK,EAAM1E,GACXA,CACT,EZgLEuc,GAAIxI,GACJyI,GFpLK,SAAkBjO,EAAO7J,GAC9B,MAGM1E,EAAS,CAACpuB,KAAM,WAAY6yB,SAHjB8J,EAAMU,kBAAkBV,EAAMK,IAAIlK,GAAO,KAK1D,OADA6J,EAAMG,MAAMhK,EAAM1E,GACXA,CACT,EE8KEyc,GAAIhN,GACJiN,EAAGvN,GACHwN,GAAI,GACJC,IAAKnN,GACLoN,MAAO12B,GACP22B,Ia3LK,SAAavO,EAAO7J,GAEzB,MAAM1E,EAAS,CAACpuB,KAAM,OAAQyG,MAAO,KAErC,OADAk2B,EAAMG,MAAMhK,EAAM1E,GACXA,CACT,EbuLE+c,IAAK3tB,IASP,SAAS,GAAImf,EAAO7J,GAClB,OAAO6J,EAAMK,IAAIlK,EACnB,CAQA,SAASwT,GAAK3J,EAAO7J,GACnB,OAAO6J,EAAMiC,OAAOjC,EAAMK,IAAIlK,GAChC,CAKA,SAAS4P,KAAU,CcxOZ,MAAM0I,GAAS,CACpB,UACA,UACA,QACA,aACA,OACA,KACA,UACA,SACA,MACA,WACA,KACA,SACA,MACA,MACA,KACA,KACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,SACA,KACA,KACA,UACA,OACA,OACA,MACA,KACA,WACA,SACA,IACA,YACA,MACA,UACA,UACA,QACA,QACA,KACA,KACA,QACA,KACA,KACA,QACA,KACA,KACA,MACA,OC3DWn6B,GAAU,CAErB,SACA,QACA,SACA,YCLWo6B,GAAY,CACvB,OACA,OACA,WACA,SACA,WACA,OACA,OACA,OACA,UACA,WACA,QACA,KACA,SACA,SACA,QACA,WACA,QACA,SCoCI,GAAe,CAAC,EAChBC,GAAgBpX,EAAQ,CAAC,UAAW,YAU3B,SAASqX,GAAuB/kC,GAC7C,MACMglC,EAmQR,SAAyBvsC,GACvB,OAKA,SAAkBwH,GAChB,OAAOoB,OAAOpB,GAAOxH,QAAQ,kBAAmBA,EAClD,CACF,CA5QmBwsC,EADAjlC,GAAW,IAEj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","sources":["webpack://google-docs-to-markdown/./node_modules/debug/src/browser.js","webpack://google-docs-to-markdown/./node_modules/debug/src/common.js","webpack://google-docs-to-markdown/./node_modules/extend/index.js","webpack://google-docs-to-markdown/./node_modules/ms/index.js","webpack://google-docs-to-markdown/webpack/bootstrap","webpack://google-docs-to-markdown/webpack/runtime/define property getters","webpack://google-docs-to-markdown/webpack/runtime/hasOwnProperty shorthand","webpack://google-docs-to-markdown/webpack/runtime/make namespace object","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/schema.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/merge.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/normalize.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/types.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/defined-info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/create.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xlink.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xml.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xmlns.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/aria.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/html.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/svg.js","webpack://google-docs-to-markdown/./node_modules/property-information/index.js","webpack://google-docs-to-markdown/./node_modules/comma-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-parse-selector/lib/index.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/find.js","webpack://google-docs-to-markdown/./node_modules/space-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/create-h.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-is/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/regex.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/index.js","webpack://google-docs-to-markdown/./lib/css.js","webpack://google-docs-to-markdown/./lib/fix-google-html.js","webpack://google-docs-to-markdown/./node_modules/web-namespaces/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-dom-parse/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-find-after/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-is-element/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-text/lib/index.js","webpack://google-docs-to-markdown/./node_modules/trim-trailing-lines/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/code.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/del.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/list-items-spread.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/dl.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/em.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/heading.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/img.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/inline-code.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/find-selected-options.js","webpack://google-docs-to-markdown/./node_modules/hast-util-embedded/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-has-property/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-is-body-ok-link/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-phrasing/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/li.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-string/lib/index.js","webpack://google-docs-to-markdown/./node_modules/@ungap/structured-clone/esm/types.js","webpack://google-docs-to-markdown/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://google-docs-to-markdown/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://google-docs-to-markdown/./node_modules/@ungap/structured-clone/esm/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-whitespace/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-phrasing/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/media.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/p.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/q.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/strong.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-cell.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-row.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/comment.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/root.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/text.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/a.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/base.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/blockquote.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/br.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/hr.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/iframe.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/input.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/select.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/textarea.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/wbr.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/lib/block.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/lib/content.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/lib/skippable.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-position/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/state.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-remark/lib/index.js","webpack://google-docs-to-markdown/./node_modules/ccount/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-character/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-normalize-identifier/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://google-docs-to-markdown/./node_modules/markdown-table/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://google-docs-to-markdown/./node_modules/longest-streak/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-chunked/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-combine-extensions/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-factory-space/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-classify-character/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-resolve-all/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/remark-gfm/lib/index.js","webpack://google-docs-to-markdown/./node_modules/zwitch/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/configure.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/join.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/unsafe.js","webpack://google-docs-to-markdown/./node_modules/decode-named-character-reference/index.dom.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-string/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://google-docs-to-markdown/./node_modules/bail/index.js","webpack://google-docs-to-markdown/./node_modules/is-plain-obj/index.js","webpack://google-docs-to-markdown/./node_modules/vfile-message/node_modules/unist-util-stringify-position/lib/index.js","webpack://google-docs-to-markdown/./node_modules/vfile-message/lib/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minpath.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minproc.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.shared.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.browser.js","webpack://google-docs-to-markdown/./node_modules/unified/lib/callable-instance.js","webpack://google-docs-to-markdown/./node_modules/unified/lib/index.js","webpack://google-docs-to-markdown/./node_modules/trough/index.js","webpack://google-docs-to-markdown/./lib/convert.js","webpack://google-docs-to-markdown/./lib/rehype-to-remark-with-spaces.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm/lib/index.js","webpack://google-docs-to-markdown/./node_modules/remark-stringify/lib/index.js","webpack://google-docs-to-markdown/./index.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Object.<string, Info>} Properties\n * @typedef {Object.<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","import {Schema} from './schema.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {import('./schema.js').Schema[]} definitions\n * @param {string} space\n * @returns {import('./schema.js').Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  var index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    this.property = property\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.attribute = null\nInfo.prototype.property = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","var powers = 0\n\nexport var boolean = increment()\nexport var booleanish = increment()\nexport var overloadedBoolean = increment()\nexport var number = increment()\nexport var spaceSeparated = increment()\nexport var commaSeparated = increment()\nexport var commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\nvar checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    var index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    while (++index < checks.length) {\n      mark(\n        this,\n        checks[index],\n        (mask & types[checks[index]]) === types[checks[index]]\n      )\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {InstanceType<typeof DefinedInfo>} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","import {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  /** @type {string} */\n  var prop\n  /** @type {Info} */\n  var info\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes, prop),\n        definition.properties[prop],\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport var xlink = create({\n  space: 'xlink',\n  transform: xlinkTransform,\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xlinkTransform(_, prop) {\n  return 'xlink:' + prop.slice(5).toLowerCase()\n}\n","import {create} from './util/create.js'\n\nexport var xml = create({\n  space: 'xml',\n  transform: xmlTransform,\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xmlTransform(_, prop) {\n  return 'xml:' + prop.slice(3).toLowerCase()\n}\n","/**\n * @param {Object.<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Object.<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport var aria = create({\n  transform: ariaTransform,\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction ariaTransform(_, prop) {\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n}\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: commaSeparated,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextMenu: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: commaSeparated,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport var svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport var html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport var svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","import {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\nexport function find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} attribute\n * @returns {string}\n */\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * @param {string} property\n * @returns {string}\n */\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return 'data' + value\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * Light-Weight CSS Tooling\n *\n * The code here is meant to be a pretty light-weight and minimal approach to\n * CSS handling that meets the needs of the rest of the GDoc2Md library. It is\n * not meant to apply much validation or strictness to the CSS it handles, or\n * to handle particularly complex CSS content that we don't expect to see from\n * Google Docs.\n *\n * If our needs get drastically more complex in the future, we should switch to\n * using a dedicated third-party CSS parser like css-tree or postcss.\n */\n\n/** @typedef {{[index: string]: string}} Style */\n\n/**\n * Check whether a string is empty or only contains whitespace.\n * @param {string} text\n * @returns {boolean}\n */\nfunction isBlank(text) {\n  return /^\\s*$/.test(text);\n}\n\n/**\n * Parse a CSS property list (e.g. from an HTML `style` attribute) into a simple\n * object where the keys are the property names and the values are the property\n * values (as strings).\n * Value strings are lower-cased for easier handling (since most CSS values are\n * case insensitive), but this doesn't break out individual properties from\n * shorthand properties or do other specialized property/value handling.\n * @param {string} text\n * @returns {Style}\n */\nexport function parseCssPropertyList(text) {\n  const properties = Object.create(null);\n  if (!text) return properties;\n\n  // This is pretty simplistic, and there are significant caveats:\n  // - The semicolon could be inside a quoted string, in which case it shouldn't\n  //   split properties.\n  // - The property names and values are not limited to the actual allowed\n  //   characters (the rules used here are much simpler than in real CSS).\n  //\n  // For the most part, this library doesn't need to be too concerned with\n  // invalid input. We expect to be working with valid HTML & CSS that was\n  // output by Google Docs. We haven't seen content that violates the above\n  // caveats, so this is OK for now, but that could potentially change.\n  for (const property of text.split(';')) {\n    if (isBlank(property)) continue;\n\n    try {\n      const {name, value} = property\n        .match(/^\\s*(?<name>[\\w-]+)\\s*:\\s*(?<value>.+)\\s*$/)\n        .groups;\n      // Lower-case values for easier lookups and comparisons. Technically this\n      // should only happen for parts of the value that are not quoted.\n      properties[name] = value.toLowerCase();\n    }\n    catch(error) {\n      console.warn(`Could not parse CSS property \"${property}\" (${error})`);\n    }\n  }\n\n  return properties;\n}\n\n/**\n * Get the content of the node's `style` attribute as a parsed object. This\n * caches the results on the node for easy retrieval.\n * @param {RehypeNode} node\n * @returns {Style}\n */\nfunction getNodeStyle(node) {\n  return node._style ||= parseCssPropertyList(node.properties?.style);\n}\n\n/**\n * Resolve the actual, inherited value of a single style property based on the\n * whole tree of nodes. This caches results on the node for easy retrieval.\n * @param {string} propertyName\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors List of ancestor nodes, ordered shallowest to\n *        deepest in the tree.\n * @returns {string|undefined}\n */\nfunction getResolvedStyleProperty(propertyName, node, ancestors) {\n  node._resolvedStyle ||= Object.create(null);\n  if (propertyName in node._resolvedStyle) {\n    return node._resolvedStyle[propertyName];\n  }\n\n  let value = getNodeStyle(node)[propertyName];\n  if ((value && value !== 'inherit') || !ancestors?.length) {\n    node._resolvedStyle[propertyName] = value;\n    return value;\n  }\n\n  // WARNING: Not all properties are inheritable, but this code doesn't check\n  // for inheritability. If it turns out we need to do so, MDN has nice data\n  // to build an allow/block-list from:\n  // https://github.com/mdn/data/blob/main/css/properties.json\n  const parentAncestors = ancestors.slice(0, -1);\n  const parent = ancestors[parentAncestors.length];\n  return getResolvedStyleProperty(propertyName, parent, parentAncestors);\n}\n\n/**\n * Get an object with properties representing a node's fully resolved styles,\n * including anything inherited from ancestors.\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors Ancestors of `node`, starting with the tree\n *        root and ending with the parent of `node`.\n * @returns {Style}\n */\nexport function resolveNodeStyle(node, ancestors) {\n  return new Proxy(Object.create(null), {\n    get (target, property, _receiver) {\n      if (!(property in target)) {\n        target[property] = getResolvedStyleProperty(property, node, ancestors);\n      }\n      return target[property];\n    }\n  });\n}\n","'use strict';\n\nimport { h as hast } from 'hastscript';\nimport { CONTINUE, EXIT, visit } from 'unist-util-visit';\nimport { visitParents } from 'unist-util-visit-parents';\nimport GithubSlugger from 'github-slugger';\nimport debug from 'debug'\nimport { resolveNodeStyle } from './css.js';\n\nconst log = debug('app:fix-google-html:debug');\n\nconst blockElements = new Set([\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'caption',\n  'center',  // historic\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',  // historic\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'frameset',  // historic\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'isindex',  // historic\n  'li',\n  'main',\n  'menu',\n  'nav',\n  'noframes',  // historic\n  'ol',\n  'p',\n  'pre',\n  'section',\n  'summary',\n  'table',\n  'thead',\n  'tbody',\n  'tfoot',\n  'td',\n  'th',\n  'tr',\n  'ul'\n]);\n\n// These elements convert to Markdown nodes that can't start or end with spaces.\n// For example, you can't start emphasis with a space: `This * is emphasized*`.\nconst spaceSensitiveElements = new Set([\n  'em',\n  'strong',\n]);\n\nconst isList = node => node.tagName === 'ul' || node.tagName === 'ol';\nconst isStyled = node => node.type === 'element' && node.properties.style;\nconst isBlock = node => node && blockElements.has(node.tagName);\nconst isSpaceSensitive = node => node && spaceSensitiveElements.has(node.tagName);\nconst isCell = (node) => node.tagName === 'th' || node.tagName === 'td';\nconst isAnchor = (node) => node.tagName === 'a';\n\nconst spaceAtStartPattern = /^(\\s+)/;\nconst spaceAtEndPattern = /(\\s+)$/;\n\n// Wrap the children of `node` with the `wrapper` node.\nfunction wrapChildren (node, wrapper) {\n  wrapper.children = node.children;\n  node.children = [wrapper];\n  return wrapper;\n}\n\n/**\n * Fix the incorrect formatting of nested lists in Google Docs's HTML. Lists\n * can only have `div` and `li` children, but Google Docs has other lists as\n * direct descendents. This moves those free-floating lists into the previous\n * `li` element under the assumption that they represent subitems of it.\n *\n * @param {RehypeNode} node Fix the tree below this node\n *\n * @example\n * Input a tree like:\n *    <ul>\n *      <li>An item!</li>\n *      <ul>\n *        <li>A subitem!</li>\n *      </ul>\n *    </ul>\n *\n * Output:\n *    <ul>\n *      <li>An Item!\n *        <ul>\n *          <li>A subitem!</li>\n *        </ul>\n *      </li>\n *    </ul>\n */\nexport function fixNestedLists (node) {\n  visit(node, isList, (node, index, parent) => {\n    if (isList(parent)) {\n      const previous = parent.children[index - 1];\n      if (previous && previous.tagName === 'li') {\n        previous.children.push(node);\n        parent.children.splice(index, 1);\n        return index;\n      }\n      else {\n        console.warn('No previous list item to move nested list into!');\n      }\n    }\n  });\n}\n\n/**\n * Google Docs does italics/bolds/etc on `<span>`s with style attributes, but\n * rehype-remark does not pick up on those. Instead, transform them into\n * semantic `em`, `strong`, etc. elements.\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unInlineStyles (node) {\n  convertInlineStylesToElements(node);\n  mergeConsecutiveInlineStyles(node);\n}\n\n/**\n * @private\n * Convert CSS in style attribtutes to semantic elements that are more readily\n * converted to Markdown.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction convertInlineStylesToElements(node) {\n  visitParents(node, n => isStyled(n) && !isBlock(n), (node, parents) => {\n    const style = resolveNodeStyle(node, parents);\n\n    // Turn a big font size into h1\n    if (style['font-size'] && parseFloat(style['font-size'].slice(0, -2)) > 20) {\n      wrapChildren(node, hast('title'));\n    }\n\n    if (style['font-style'] === 'italic') {\n      wrapChildren(node, hast('em'));\n    }\n\n    const weight = style['font-weight'];\n    if (weight === 'bold' || weight === '700') {\n      wrapChildren(node, hast('strong'));\n    }\n\n    const verticalAlign = style['vertical-align'];\n    if (verticalAlign === 'super') {\n      wrapChildren(node, hast('sup'));\n    }\n    else if (verticalAlign === 'sub') {\n      wrapChildren(node, hast('sub'));\n    }\n\n    // Some browsers paste with the `text-decoration` property and some use the\n    // newer `text-decoration-line`, so we need to support both.\n    const decorationLine = style['text-decoration'] || style['text-decoration-line'];\n    if (decorationLine?.startsWith('line-through')) {\n      wrapChildren(node, hast('del'));\n    }\n\n    // Google docs doesn't really have anything that represents \"code\", so infer\n    // it from the use of monospace fonts.\n    if (/(,\\s*monospace)|(Consolas)/i.test(style['font-family'])) {\n      wrapChildren(node, hast('code'));\n    }\n\n    // Keep the structure as flat as possible by removing semantically\n    // meaningless elements once we've extracted formatting from them.\n    if (node.tagName === 'span') {\n      const parent = parents[parents.length - 1];\n      const index = parent.children.indexOf(node);\n      if (index === -1) {\n        throw new Error('Could not find visited node in its parent');\n      }\n\n      const childrenCount = node.children.length;\n      parent.children.splice(index, 1, ...node.children);\n      return index + childrenCount;\n    }\n  });\n}\n\n/**\n * @private\n * Find consecutive inline elements of the same type and merge their contents.\n * For example, this would convert:\n *\n *     <code>const </code><code>name</code>\n *\n * To:\n *\n *     <code>const name</code>\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction mergeConsecutiveInlineStyles (node) {\n  visit(node, n => n.tagName && n.children?.length, (node, _index, _parent) => {\n    const newChildren = [];\n    let activeNode = null;\n    for (const child of node.children) {\n      if (activeNode) {\n        if (child.tagName === activeNode.tagName) {\n          activeNode.children.push(...child.children);\n        }\n        else {\n          activeNode = null;\n        }\n      }\n      if (!activeNode) {\n        newChildren.push(child);\n        if (child.tagName && !isBlock(child)) {\n          activeNode = child;\n        }\n      }\n    }\n    node.children = newChildren;\n  });\n}\n\n/**\n * Line breaks frequently wind up wrapped with a somewhat pointless `<span>`\n * element that makes them hard to deal correctly with. Unwrap those line breaks\n * so that they are bare `<br>` elements.\n *\n * Changes this:\n *     <span><br></span>\n * To:\n *     <br>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unwrapLineBreaks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (\n      child.tagName === 'span'\n      && child.children.length === 1\n      && child.children[0].tagName === 'br'\n    ) {\n      children.splice(i, 1, child.children[0]);\n    }\n    else if (child.children) {\n      unwrapLineBreaks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Moves linebreaks outside of anchor elements,\n * if the linebreak is the first and/or last child of the anchor.\n * @param {RehypeNode} node\n */\nexport function moveLinebreaksOutsideOfAnchors (node) {\n  visit(node, isAnchor, (node, index, parent) => {\n    const children = node.children;\n    if (children[children.length - 1]?.tagName === 'br') {\n      const endingBr = children.pop()\n      parent.children.splice(index + 1, 0, endingBr);\n    }\n    if (children[0]?.tagName === 'br') {\n      const beginningBr = children.shift()\n      parent.children.splice(index, 0, beginningBr);\n    }\n  });\n}\n\n/**\n * Paragraphs and other block elements frequently wind up preceded with\n * pointless `<br>` elements. This is probably because paragraphs do not, by\n * default, have any space around them in a Google doc, even though having a\n * blank line is what causes Google Docs to spit out `<p>` elements instead of\n * just `<br>` elements.\n *\n * Changes this:\n *     <br><p>Blah</p>\n * To:\n *     <p>Blah</p>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function removeLineBreaksBeforeBlocks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.tagName === 'br' && isBlock(children[i + 1])) {\n      children.splice(i, 1);\n      i -= 1;\n    }\n    else if (child.children) {\n      removeLineBreaksBeforeBlocks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Remove spaces from the start or end of nodes where it's not valid in Markdown\n * (e.g. `<em>`) and return the removed spaces. Works recursively to handle\n * nested nodes with surrounding spaces.\n * @param {RehypeNode} node\n * @returns {string}\n */\nfunction _extractInvalidSpace (node, side = 'start') {\n  let totalSpace = '';\n\n  const reverse = side === 'start' ? false : true;\n  visit(node, (child, index, parent) => {\n    if (child.type === 'text') {\n      const pattern = side === 'start' ? spaceAtStartPattern : spaceAtEndPattern;\n      const spaceMatch = child.value.match(pattern);\n      if (spaceMatch) {\n        const space = spaceMatch[1];\n        const body = side === 'start'\n          ? child.value.slice(space.length)\n          : child.value.slice(0, -space.length);\n        totalSpace = side === 'start'\n          ? (totalSpace + space)\n          : (space + totalSpace);\n        if (body.length) {\n          child.value = body;\n          return EXIT;\n        }\n        else {\n          parent.children.splice(index, 1);\n          return side === 'start' ? index : index - 1;\n        }\n      }\n      else {\n        return EXIT;\n      }\n    }\n    else if (isSpaceSensitive(child)) {\n      return CONTINUE;\n    }\n    else {\n      return EXIT;\n    }\n  }, reverse);\n\n  return totalSpace;\n}\n\n/**\n * In Google Docs (and HTML in general), an element that formats some text can\n * start with spaces, tabs, etc. However, in Markdown, some inline markup\n * (mainly emphasis marks like `**bold**` and `_italic_`) can't start or end\n * with spaces. This finds such elements and moves leading and trailing spaces\n * from inside to outside them.\n *\n * For example, this turns a tree like:\n *\n *     <p>Hello<em> italics </em></p>\n *\n * Into:\n *\n *     <p>Hello <em>italics</em> </p>\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function moveSpaceOutsideSensitiveChildren (node) {\n  visit(node, isSpaceSensitive, (node, index, parent) => {\n    let nextIndex = index + 1;\n\n    const startSpace = _extractInvalidSpace(node, 'start');\n    if (startSpace) {\n      parent.children.splice(index, 0, { type: 'text', value: startSpace });\n      nextIndex++;\n    }\n\n    const endSpace = _extractInvalidSpace(node, 'end');\n    if (endSpace) {\n      parent.children.splice(nextIndex, 0, { type: 'text', value: endSpace });\n      nextIndex++;\n    }\n\n    return nextIndex;\n  });\n}\n\n/**\n * @param {RehypeNode} node\n * @returns {string|null}\n */\nfunction getNodeTextAlignment (node) {\n  const style = resolveNodeStyle(node);\n  const alignMatch = style['text-align']?.match(/^(left|center|right)/);\n  if (alignMatch) {\n    return alignMatch[1];\n  }\n  return null;\n}\n\n/**\n * Tables in Google Docs don't actually put alignment info on the columns or\n * cells. Instead, cells have paragraphs that are aligned. This detects the\n * alignment of the content of table cells so that the Markdown conversion will\n * set the correct alignment for columns.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function detectTableColumnAlignment(node) {\n  visit(node, isCell, (node, _index, _parent) => {\n    if (!node.properties.align) {\n      let alignment = getNodeTextAlignment(node);\n      if (!alignment && node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          const childAlignment = getNodeTextAlignment(node.children[i]);\n          if (i === 0) {\n            alignment = childAlignment;\n          }\n          else if (childAlignment !== alignment) {\n            alignment = null;\n            break;\n          }\n        }\n      }\n\n      if (alignment) {\n        node.properties.align = alignment;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * Determine whether all the text nodes that are descendents of this node are\n * wrapped inside nodes represent `<code>` elements. Returns `null` if the\n * node has no text descendents, otherwise returns a boolean.\n * @param {RehypeNode} parent Check children of this node.\n * @returns {boolean|null}\n */\nfunction isAllTextCode(parent) {\n  if (!parent.children?.length) return null;\n\n  let hasText = false;\n  for (const child of parent.children) {\n    if (child.tagName === 'code') {\n      hasText = true;\n      continue;\n    }\n    else if (child.type === 'text') {\n      if (!child.value.match(/^\\s+$/)) {\n        return false;\n      }\n    }\n    else {\n      const childResult = isAllTextCode(child);\n      if (childResult === false) {\n        return false;\n      }\n      else if (childResult === true) {\n        hasText = true;\n      }\n    }\n  }\n\n  return hasText ? true : null;\n}\n\nfunction hasCodeNewline(parent) {\n  if (!parent.children?.length) return null;\n\n  let hasNewline = false;\n  for (const child of parent.children) {\n    if (child.tagName === 'br') {\n      hasNewline = true;\n      continue;\n    }\n    else if (child.type === 'text') {\n      if (child.textContent && child.innerText.includes('\\n')) {\n        hasNewline = true;\n        continue;\n      }\n    }\n    else {\n      const childResult = hasCodeNewline(child);\n      if (childResult === false) {\n        return false;\n      }\n      else if (childResult === true) {\n        hasNewline = true;\n      }\n    }\n  }\n\n  return hasNewline ? true : null;\n}\n\n/**\n * Identify paragraphs where all the text is wrapped in `<code>` nodes and wrap\n * the entire pagraph in a `<pre><code>` node. Merge consecutive all-code\n * paragraphs into a single `<pre><code>` block.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function createCodeBlocks(node) {\n  if (!node.children?.length) return;\n\n  // TODO: identify *lines* that are all code (not just block elements) by\n  // splitting on `<br>` nodes, and break up parent blocks that have complete\n  // code lines in them.\n\n  let codeBlocks = [];\n\n  if (\n    node.tagName === 'p' &&\n    node.children.some((child) => child.tagName === 'code') &&\n    node.children.every(\n      (child) => child.tagName === 'code' || (child.type === 'text' && child.value.match(/^\\s+$/))\n    )\n  ) {\n    codeBlocks = [{ start: 0, end: node.children.length }]\n  } else {\n    let activeCodeBlock = null;\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (['tr', 'td', 'th', 'li'].includes(child.tagName)) {\n        createCodeBlocks(child);\n      } else if (isBlock(child)) {\n        if (isAllTextCode(child)) {\n          if (!activeCodeBlock) {\n            activeCodeBlock = { start: i, end: 0 };\n            codeBlocks.push(activeCodeBlock);\n          }\n        }\n        else {\n          if (activeCodeBlock) {\n            activeCodeBlock.end = i;\n            activeCodeBlock = null;\n          } else {\n            createCodeBlocks(child);\n          }\n        }\n      }\n      else {\n        createCodeBlocks(child);\n      }\n    }\n    if (activeCodeBlock) {\n      activeCodeBlock.end = node.children.length;\n      codeBlocks.push(activeCodeBlock);\n    }\n  }\n\n  // Go in reverse order so we can use the indexes as is, without worrying about\n  // how replacing each block changes the indexes of the next one.\n  for (const block of codeBlocks.reverse()) {\n    const length = block.end - block.start;\n    if (\n      node.type !== 'root' &&\n      length === 1 &&\n      !hasCodeNewline(node.children[block.start])\n    ) {\n      console.log(node.children[block.start]);\n      continue;\n    }\n    const contents = node.children\n      .slice(block.start, block.end)\n      .flatMap(node =>\n        // Unwrap paragraphs and replace them with their contents + a line break\n        // so we don't wind up adding blank lines around each line of code.\n        node.tagName === 'p'\n          ? [...node.children, {type:'element', tagName: 'br'}]\n          : [node]\n      );\n    node.children.splice(block.start, length, {\n      type: 'element',\n      tagName: 'pre',\n      children: [{\n        type: 'element',\n        tagName: 'code',\n        children: contents\n      }]\n    });\n  }\n}\n\nconst isChecklistItem = (node) => node.tagName === 'li' && node.properties?.role === 'checkbox';\n\n/**\n * Insert actual `<input>` checkboxes at the start of items in checklists.\n *\n * Google Docs checklists use ARIA attributes to indicate that items are\n * checklist items, and in some browsers include an image (!) of a checkbox.\n * Neither of these cleanly translate to Markdown on their own.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction fixChecklists (node) {\n  visit(node, isChecklistItem, (node, _index, _parent) => {\n    // As of 2023-08-16, Chrome Canary starts checklist items with an inline,\n    // b64-encoded image of an (un)checked checkbox. Remove it so we don't get\n    // images in our Markdown output.\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (child.type === 'element') {\n        if (\n          child.tagName === 'img' &&\n          child.properties?.ariaRoleDescription?.includes('checkbox')\n        ) {\n          node.children.splice(i, 1);\n        }\n        break;\n      }\n    }\n\n    const checked = node.properties.ariaChecked?.toLowerCase() === 'true';\n    // The checkbox must be in a <p> element.\n    // See: https://github.com/syntax-tree/hast-util-to-mdast/issues/80\n    node.children.splice(0, 0, {\n      type: 'element',\n      tagName: 'p',\n      children: [{\n        type: 'element',\n        tagName: 'input',\n        properties: { type: 'checkbox', checked }\n      }]\n    });\n  });\n}\n\nfunction getTextContent (node) {\n  if (node.type === 'text') {\n    return node.value;\n  }\n  else if (node.children) {\n    return node.children.map(getTextContent).join('');\n  }\n  else {\n    return '';\n  }\n}\n\n/**\n * Create IDs for headings, and update internal links to use those IDs.\n * @param {RehypeNode} node\n * @param {*} sliceClip\n */\nfunction fixInternalLinks (node, sliceClip) {\n  if (!sliceClip) return;\n\n  let internalHeadings;\n  try {\n    internalHeadings = sliceClip\n      .resolved\n      .dsl_styleslices\n      .find(styleslice => styleslice.stsl_type === 'paragraph')\n      .stsl_styles\n      .filter(style => style?.ps_hdid)\n      .map(heading => ({ level: heading.ps_hd, id: heading.ps_hdid }));\n  }\n  catch (error) {\n    console.error('Error extracting headings from GDocs slice clip:', error);\n  }\n\n  // Nothing to do if there were no headings!\n  if (!internalHeadings?.length) return;\n\n  const headings = [];\n  visit(node, n => n.tagName?.match(/^h\\d$/), (node, _index, _parent) => {\n    headings.push(node);\n  });\n\n  // check if the headings in the tree match the internal headings\n  if (!headings.every(\n    (heading, index) => heading.tagName.toLowerCase() === `h${internalHeadings?.[index]?.level}`)\n  ) {\n    console.warn(\n      'Headings in slice clip data do not match headings in document; '\n      + 'intra-document links will be broken.'\n    );\n    return;\n  }\n\n  // Replace heading IDs with new, readable IDs.\n  const slugger = new GithubSlugger();\n  const headingIdMap = new Map();\n  headings.forEach((heading, index) => {\n    const internalHeading = internalHeadings[index];\n    const newId = slugger.slug(getTextContent(heading));\n    heading.properties.id = newId;\n    headingIdMap.set(internalHeading.id, newId);\n  });\n\n  // Update any links to the headings.\n  visit(node, n => n.tagName === 'a', (node, _index, _parent) => {\n    let url;\n    try {\n      url = new URL(node.properties.href);\n    }\n    catch (_error) {\n      return;\n    }\n\n    if (url.host === 'docs.google.com') {\n      const internalHeadingId = url.hash.match(/^#heading=([a-z0-9.]+)$/)?.[1];\n      log('Updating link to %o', internalHeadingId)\n      const newId = headingIdMap.get(internalHeadingId);\n      if (newId) {\n        node.properties.href = `#${newId}`;\n      }\n    }\n  });\n}\n\n/**\n * A rehype plugin to clean up the HTML of a Google Doc. .This applies to the\n * live HTML of Doc, as when you copy and paste it; not *exported* HTML (it\n * might apply there, too; I haven’t looked into it).\n */\nexport default function fixGoogleHtml () {\n  return (tree, _file) => {\n    unInlineStyles(tree);\n    createCodeBlocks(tree);\n    moveSpaceOutsideSensitiveChildren(tree);\n    fixNestedLists(tree);\n    detectTableColumnAlignment(tree);\n    unwrapLineBreaks(tree);\n    moveLinebreaksOutsideOfAnchors(tree);\n    removeLineBreaksBeforeBlocks(tree);\n    fixChecklists(tree);\n    fixInternalLinks(tree, _file.data.sliceClip)\n    return tree;\n  };\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Doctype} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n */\n\n/**\n * @callback AfterTransform\n *   Callback called when each node is transformed.\n * @param {Node} domNode\n *   DOM node that was handled.\n * @param {HastNodes} hastNode\n *   Corresponding hast node.\n * @returns {undefined | void}\n *   Nothing.\n *\n *   Note: `void` included until TS infers `undefined` nicely.\n *\n * @typedef Options\n *   Configuration.\n * @property {AfterTransform | null | undefined} [afterTransform]\n *   Callback called when each node is transformed (optional).\n */\n\nimport {h, s} from 'hastscript'\nimport {webNamespaces} from 'web-namespaces'\n\n/**\n * Transform a DOM tree to a hast tree.\n *\n * @param {Node} tree\n *   DOM tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   Equivalent hast node.\n */\nexport function fromDom(tree, options) {\n  return transform(tree, options || {}) || {type: 'root', children: []}\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNodes | undefined}\n *   Equivalent hast node.\n *\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\n */\nfunction transform(node, options) {\n  const transformed = one(node, options)\n  if (transformed && options.afterTransform)\n    options.afterTransform(node, transformed)\n  return transformed\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNodes | undefined}\n *   Equivalent hast node.\n */\nfunction one(node, options) {\n  switch (node.nodeType) {\n    case 1 /* Element */: {\n      const domNode = /** @type {Element} */ (node)\n      return element(domNode, options)\n    }\n\n    // Ignore: Attr (2).\n\n    case 3 /* Text */: {\n      const domNode = /** @type {Text} */ (node)\n      return text(domNode)\n    }\n\n    // Ignore: CDATA (4).\n    // Removed: Entity reference (5)\n    // Removed: Entity (6)\n    // Ignore: Processing instruction (7).\n\n    case 8 /* Comment */: {\n      const domNode = /** @type {Comment} */ (node)\n      return comment(domNode)\n    }\n\n    case 9 /* Document */: {\n      const domNode = /** @type {Document} */ (node)\n      return root(domNode, options)\n    }\n\n    case 10 /* Document type */: {\n      return doctype()\n    }\n\n    case 11 /* Document fragment */: {\n      const domNode = /** @type {DocumentFragment} */ (node)\n      return root(domNode, options)\n    }\n\n    default: {\n      return undefined\n    }\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document | DocumentFragment} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastRoot}\n *   Equivalent hast node.\n */\nfunction root(node, options) {\n  return {type: 'root', children: all(node, options)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n *   Equivalent hast node.\n */\nfunction doctype() {\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   DOM node to transform.\n * @returns {HastText}\n *   Equivalent hast node.\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n *   DOM node to transform.\n * @returns {HastComment}\n *   Equivalent hast node.\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastElement}\n *   Equivalent hast node.\n */\nfunction element(node, options) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment | Element} */\n  const content =\n    // @ts-expect-error: DOM types are wrong, content can exist.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Record<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content, options))\n}\n\n/**\n * Transform child nodes in a parent.\n *\n * @param {Document | DocumentFragment | Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {Array<HastRootContent>}\n *   Equivalent hast nodes.\n */\nfunction all(node, options) {\n  const nodes = node.childNodes\n  /** @type {Array<HastRootContent>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index], options)\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('unified').Parser<Root>} Parser\n *\n * @typedef {import('../index.js').Options} Options\n */\n\nimport {fromDom} from 'hast-util-from-dom'\n\n/**\n * Add support for parsing from HTML with DOM APIs.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function parse(options) {\n  /** @type {import('unified').Processor<Root>} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n  const settings = {...self.data('settings'), ...options}\n\n  self.parser = parser\n\n  /** @type {Parser} */\n  function parser(doc) {\n    const create = settings.fragment === false ? createDocument : createFragment\n    // Assume document/fragment in -> root out.\n    return /** @type {Root} */ (fromDom(create(doc)))\n  }\n}\n\n/**\n * Create a fragment.\n *\n * @param {string} value\n *   HTML.\n * @returns {DocumentFragment}\n *   Document fragment.\n */\nfunction createFragment(value) {\n  const doc = createDocument('<!doctype html><body>' + value)\n\n  /**\n   * Pretend as a DocumentFragment node, which is fine for `fromDom`.\n   */\n  return /** @type {DocumentFragment} */ ({\n    nodeType: 11,\n    childNodes: doc.body.childNodes\n  })\n}\n\n/**\n * Create a document.\n *\n * @param {string} value\n *   HTML.\n * @returns {Document}\n *   Document.\n */\nfunction createDocument(value) {\n  return new DOMParser().parseFromString(value, 'text/html')\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {(\n *   Kind extends {children: Array<infer Child>}\n *   ? Child\n *   : never\n * )} Child\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Kind\n *   All node types.\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Find the first node in `parent` after another `node` or after an index,\n * that passes `test`.\n *\n * @param parent\n *   Parent node.\n * @param index\n *   Child node or index.\n * @param [test=undefined]\n *   Test for child to look for (optional).\n * @returns\n *   A child (matching `test`, if given) or `undefined`.\n */\nexport const findAfter =\n  // Note: overloads like this are needed to support optional generics.\n  /**\n   * @type {(\n   *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, index: Child<Kind> | number, test: Check) => Matches<Child<Kind>, Check> | undefined) &\n   *   (<Kind extends UnistParent>(parent: Kind, index: Child<Kind> | number, test?: null | undefined) => Child<Kind> | undefined)\n   * )}\n   */\n  (\n    /**\n     * @param {UnistParent} parent\n     * @param {UnistNode | number} index\n     * @param {Test} [test]\n     * @returns {UnistNode | undefined}\n     */\n    function (parent, index, test) {\n      const is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return undefined\n    }\n  )\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast-util-is-element').TestFunction} TestFunction\n */\n\n/**\n * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n *\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n *\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n *\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n *\n * @typedef {BreakNumber | BreakValue | undefined} BreakBefore\n *   Any value for a break before.\n *\n * @typedef {BreakForce | BreakNumber | BreakValue | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use (default: `'normal'`).\n */\n\nimport {findAfter} from 'unist-util-find-after'\nimport {convertElement} from 'hast-util-is-element'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst cell = convertElement(isCell)\nconst p = convertElement('p')\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Nodes} tree\n *   Tree to turn into text.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options = {}) {\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<BreakNumber | string>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      ...renderedTextCollection(\n        children[index],\n        // @ts-expect-error: `tree` is a parent if we’re here.\n        tree,\n        {\n          whitespace,\n          breakBefore: index ? undefined : block,\n          breakAfter:\n            index < children.length - 1 ? br(children[index + 1]) : block\n        }\n      )\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/multipage/dom.html#rendered-text-collection-steps>\n *\n * @param {Nodes} node\n * @param {Parents} parent\n * @param {CollectionInfo} info\n * @returns {Array<BreakNumber | string>}\n */\nfunction renderedTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parents} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<BreakNumber | string>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakForce | BreakNumber | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (\n    row(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, row)\n  ) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      renderedTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  if (\n    cell(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, cell)\n  ) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Comment | Text} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<BreakNumber | string>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x20_0b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x20_0b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Nodes} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return props.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return props.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {properties: {hidden: true}}}\n */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {tagName: 'td' | 'th'}}\n */\nfunction isCell(node) {\n  return node.tagName === 'td' || node.tagName === 'th'\n}\n\n/**\n * @type {TestFunction}\n */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * Remove final line endings from `value`\n *\n * @param {unknown} value\n *   Value with trailing line endings, coerced to string.\n * @return {string}\n *   Value without trailing line endings.\n */\nexport function trimTrailingLines(value) {\n  const input = String(value)\n  let end = input.length\n\n  while (end > 0) {\n    const code = input.codePointAt(end - 1)\n    if (code !== undefined && (code === 10 || code === 13)) {\n      end--\n    } else {\n      break\n    }\n  }\n\n  return input.slice(0, end)\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Code} Code\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {trimTrailingLines} from 'trim-trailing-lines'\n\nconst prefix = 'language-'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Code}\n *   mdast node.\n */\nexport function code(state, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array<number | string> | undefined} */\n  let classList\n  /** @type {string | undefined} */\n  let lang\n\n  if (node.tagName === 'pre') {\n    while (++index < children.length) {\n      const child = children[index]\n\n      if (\n        child.type === 'element' &&\n        child.tagName === 'code' &&\n        child.properties &&\n        child.properties.className &&\n        Array.isArray(child.properties.className)\n      ) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    index = -1\n\n    while (++index < classList.length) {\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\n        lang = String(classList[index]).slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  /** @type {Code} */\n  const result = {\n    type: 'code',\n    lang: lang || null,\n    meta: null,\n    value: trimTrailingLines(toText(node))\n  }\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Delete}\n *   mdast node.\n */\nexport function del(state, node) {\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n  /** @type {Delete} */\n  const result = {type: 'delete', children}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('mdast').ListContent} ListContent\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * Infer whether list items are spread.\n *\n * @param {Readonly<Array<Readonly<ListContent>>>} children\n *   List items.\n * @returns {boolean}\n *   Whether one or more list items are spread.\n */\nexport function listItemsSpread(children) {\n  let index = -1\n\n  if (children.length > 1) {\n    while (++index < children.length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').DefinitionContent} DefinitionContent\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListContent} ListContent\n * @typedef {import('mdast').ListItem} ListItem\n *\n * @typedef {import('../state.js').State} State\n *\n */\n\n/**\n * @typedef Group\n *   Title/definition group.\n * @property {Array<Element>} titles\n *   One or more titles.\n * @property {Array<ElementContent>} definitions\n *   One or more definitions.\n */\n\nimport {listItemsSpread} from '../util/list-items-spread.js'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {List | undefined}\n *   mdast node.\n */\nexport function dl(state, node) {\n  /** @type {Array<ElementContent>} */\n  const clean = []\n  /** @type {Array<Group>} */\n  const groups = []\n  let index = -1\n\n  // Unwrap `<div>`s\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'div') {\n      clean.push(...child.children)\n    } else {\n      clean.push(child)\n    }\n  }\n\n  /** @type {Group} */\n  let group = {definitions: [], titles: []}\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < clean.length) {\n    const child = clean[index]\n\n    if (child.type === 'element' && child.tagName === 'dt') {\n      const previous = clean[index - 1]\n\n      if (\n        previous &&\n        previous.type === 'element' &&\n        previous.tagName === 'dd'\n      ) {\n        groups.push(group)\n        group = {definitions: [], titles: []}\n      }\n\n      group.titles.push(child)\n    } else {\n      group.definitions.push(child)\n    }\n  }\n\n  groups.push(group)\n\n  // Create items.\n  index = -1\n  /** @type {Array<ListContent>} */\n  const content = []\n\n  while (++index < groups.length) {\n    const result = [\n      ...handle(state, groups[index].titles),\n      ...handle(state, groups[index].definitions)\n    ]\n\n    if (result.length > 0) {\n      content.push({\n        type: 'listItem',\n        spread: result.length > 1,\n        checked: null,\n        children: result\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length > 0) {\n    /** @type {List} */\n    const result = {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(content),\n      children: content\n    }\n    state.patch(node, result)\n    return result\n  }\n}\n\n/**\n * @param {State} state\n *   State.\n * @param {Array<ElementContent>} children\n *   hast element children to transform.\n * @returns {Array<BlockContent | DefinitionContent>}\n *   mdast nodes.\n */\nfunction handle(state, children) {\n  const nodes = state.all({type: 'root', children})\n  const listItems = state.toSpecificContent(nodes, create)\n\n  if (listItems.length === 0) {\n    return []\n  }\n\n  if (listItems.length === 1) {\n    return listItems[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(listItems),\n      children: listItems\n    }\n  ]\n}\n\n/**\n * @returns {ListItem}\n */\nfunction create() {\n  return {type: 'listItem', spread: false, checked: null, children: []}\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Emphasis}\n *   mdast node.\n */\nexport function em(state, node) {\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  /** @type {Emphasis} */\n  const result = {type: 'emphasis', children}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Heading}\n *   mdast node.\n */\nexport function heading(state, node) {\n  const depth = /** @type {Heading['depth']} */ (\n    /* c8 ignore next */\n    Number(node.tagName.charAt(1)) || 1\n  )\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  /** @type {Heading} */\n  const result = {type: 'heading', depth, children}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Image} Image\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Image}\n *   mdast node.\n */\nexport function img(state, node) {\n  const properties = node.properties || {}\n\n  /** @type {Image} */\n  const result = {\n    type: 'image',\n    url: state.resolve(String(properties.src || '') || null),\n    title: properties.title ? String(properties.title) : null,\n    alt: properties.alt ? String(properties.alt) : ''\n  }\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {toText} from 'hast-util-to-text'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {InlineCode}\n *   mdast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {InlineCode} */\n  const result = {type: 'inlineCode', value: toText(node)}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n *\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {[string, Value]} Option\n *   Option, where the item at `0` is the label, the item at `1` the value.\n *\n * @typedef {Array<Option>} Options\n *   List of options.\n *\n * @typedef {string | undefined} Value\n *   `value` field of option.\n */\n\nimport {toText} from 'hast-util-to-text'\n\n/**\n * @param {Readonly<Element>} node\n *   hast element to inspect.\n * @param {Properties | undefined} [properties]\n *   Properties to use, normally taken from `node`, but can be changed.\n * @returns {Options}\n *   Options.\n */\nexport function findSelectedOptions(node, properties) {\n  /** @type {Array<Element>} */\n  const selectedOptions = []\n  /** @type {Options} */\n  const values = []\n  const props = properties || node.properties || {}\n  const options = findOptions(node)\n  const size =\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\n    (props.multiple ? 4 : 1)\n  let index = -1\n\n  while (++index < options.length) {\n    const option = options[index]\n\n    if (option && option.properties && option.properties.selected) {\n      selectedOptions.push(option)\n    }\n  }\n\n  const list = selectedOptions.length > 0 ? selectedOptions : options\n  const max = list.length > size ? size : list.length\n  index = -1\n\n  while (++index < max) {\n    const option = list[index]\n    const props = option.properties || {}\n    const content = toText(option)\n    const label = content || String(props.label || '')\n    const value = String(props.value || '') || content\n    values.push([value, label === value ? undefined : label])\n  }\n\n  return values\n}\n\n/**\n * @param {Element} node\n *   Parent to find in.\n * @returns {Array<Element>}\n *   Option elements.\n */\nfunction findOptions(node) {\n  /** @type {Array<Element>} */\n  const results = []\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if ('children' in child && Array.isArray(child.children)) {\n      results.push(...findOptions(child))\n    }\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'option' &&\n      (!child.properties || !child.properties.disabled)\n    ) {\n      results.push(child)\n    }\n  }\n\n  return results\n}\n","import {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is a *embedded content*.\n *\n * @param value\n *   Thing to check (typically `Node`).\n * @returns\n *   Whether `value` is an element considered embedded content.\n *\n *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,\n *   `object`, `picture`, `svg`, and `video` are embedded content.\n */\nexport const embedded = convertElement(\n  /**\n   * @param element\n   * @returns {element is {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}}\n   */\n  function (element) {\n    return (\n      element.tagName === 'audio' ||\n      element.tagName === 'canvas' ||\n      element.tagName === 'embed' ||\n      element.tagName === 'iframe' ||\n      element.tagName === 'img' ||\n      element.tagName === 'math' ||\n      element.tagName === 'object' ||\n      element.tagName === 'picture' ||\n      element.tagName === 'svg' ||\n      element.tagName === 'video'\n    )\n  }\n)\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Check if `node` is an element and has a `name` property.\n *\n * @template {string} Key\n *   Type of key.\n * @param {Nodes} node\n *   Node to check (typically `Element`).\n * @param {Key} name\n *   Property name to check.\n * @returns {node is Element & {properties: Record<Key, Array<number | string> | number | string | true>}}}\n *   Whether `node` is an element that has a `name` property.\n *\n *   Note: see <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/27c9274/types/hast/index.d.ts#L37C29-L37C98>.\n */\nexport function hasProperty(node, name) {\n  const value =\n    node.type === 'element' &&\n    own.call(node.properties, name) &&\n    node.properties[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\nconst list = new Set(['pingback', 'prefetch', 'stylesheet'])\n\n/**\n * Checks whether a node is a “body OK” link.\n *\n * @param {Nodes} node\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is a “body OK” link.\n */\nexport function isBodyOkLink(node) {\n  if (node.type !== 'element' || node.tagName !== 'link') {\n    return false\n  }\n\n  if (node.properties.itemProp) {\n    return true\n  }\n\n  const rel = node.properties.rel\n  let index = -1\n\n  if (!Array.isArray(rel) || rel.length === 0) {\n    return false\n  }\n\n  while (++index < rel.length) {\n    if (!list.has(String(rel[index]))) {\n      return false\n    }\n  }\n\n  return true\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\nimport {embedded} from 'hast-util-embedded'\nimport {hasProperty} from 'hast-util-has-property'\nimport {isBodyOkLink} from 'hast-util-is-body-ok-link'\nimport {convertElement} from 'hast-util-is-element'\n\nconst basic = convertElement([\n  'a',\n  'abbr',\n  // `area` is in fact only phrasing if it is inside a `map` element.\n  // However, since `area`s are required to be inside a `map` element, and it’s\n  // a rather involved check, it’s ignored here for now.\n  'area',\n  'b',\n  'bdi',\n  'bdo',\n  'br',\n  'button',\n  'cite',\n  'code',\n  'data',\n  'datalist',\n  'del',\n  'dfn',\n  'em',\n  'i',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'map',\n  'mark',\n  'meter',\n  'noscript',\n  'output',\n  'progress',\n  'q',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'select',\n  'small',\n  'span',\n  'strong',\n  'sub',\n  'sup',\n  'template',\n  'textarea',\n  'time',\n  'u',\n  'var',\n  'wbr'\n])\n\nconst meta = convertElement('meta')\n\n/**\n * Check if the given value is *phrasing* content.\n *\n * @param {Nodes} value\n *   Node to check.\n * @returns {boolean}\n *   Whether `value` is phrasing content.\n */\nexport function phrasing(value) {\n  return Boolean(\n    value.type === 'text' ||\n      basic(value) ||\n      embedded(value) ||\n      isBodyOkLink(value) ||\n      (meta(value) && hasProperty(value, 'itemProp'))\n  )\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').ListItem} ListItem\n *\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef ExtractResult\n *   Result of extracting a leading checkbox.\n * @property {Element | undefined} checkbox\n *   The checkbox that was removed, if any.\n * @property {Element} rest\n *   If there was a leading checkbox, a deep clone of the node w/o the leading\n *   checkbox; otherwise a reference to the given, untouched, node.\n */\n\nimport {phrasing} from 'hast-util-phrasing'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {ListItem}\n *   mdast node.\n */\nexport function li(state, node) {\n  // If the list item starts with a checkbox, remove the checkbox and mark the\n  // list item as a GFM task list item.\n  const {rest, checkbox} = extractLeadingCheckbox(node)\n  const checked = checkbox ? Boolean(checkbox.properties.checked) : null\n  const spread = spreadout(rest)\n  const children = state.toFlow(state.all(rest))\n\n  /** @type {ListItem} */\n  const result = {type: 'listItem', spread, checked, children}\n  state.patch(node, result)\n  return result\n}\n\n/**\n * Check if an element should spread out.\n *\n * The reason to spread out a markdown list item is primarily whether writing\n * the equivalent in markdown, would yield a spread out item.\n *\n * A spread out item results in `<p>` and `</p>` tags.\n * Otherwise, the phrasing would be output directly.\n * We can check for that: if there’s a `<p>` element, spread it out.\n *\n * But what if there are no paragraphs?\n * In that case, we can also assume that if two “block” things were written in\n * an item, that it is spread out, because blocks are typically joined by blank\n * lines, which also means a spread item.\n *\n * Lastly, because in HTML things can be wrapped in a `<div>` or similar, we\n * delve into non-phrasing elements here to figure out if they themselves\n * contain paragraphs or 2 or more flow non-phrasing elements.\n *\n * @param {Readonly<Element>} node\n * @returns {boolean}\n */\nfunction spreadout(node) {\n  let index = -1\n  let seenFlow = false\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element') {\n      if (phrasing(child)) continue\n\n      if (child.tagName === 'p' || seenFlow || spreadout(child)) {\n        return true\n      }\n\n      seenFlow = true\n    }\n  }\n\n  return false\n}\n\n/**\n * Extract a leading checkbox from a list item.\n *\n * If there was a leading checkbox, makes a deep clone of the node w/o the\n * leading checkbox; otherwise a reference to the given, untouched, node is\n * given back.\n *\n * So for example:\n *\n * ```html\n * <li><input type=\"checkbox\">Text</li>\n * ```\n *\n * …becomes:\n *\n * ```html\n * <li>Text</li>\n * ```\n *\n * ```html\n * <li><p><input type=\"checkbox\">Text</p></li>\n * ```\n *\n * …becomes:\n *\n * ```html\n * <li><p>Text</p></li>\n * ```\n *\n * @param {Readonly<Element>} node\n * @returns {ExtractResult}\n */\nfunction extractLeadingCheckbox(node) {\n  const head = node.children[0]\n\n  if (\n    head &&\n    head.type === 'element' &&\n    head.tagName === 'input' &&\n    head.properties &&\n    (head.properties.type === 'checkbox' || head.properties.type === 'radio')\n  ) {\n    const rest = {...node, children: node.children.slice(1)}\n    return {checkbox: head, rest}\n  }\n\n  // The checkbox may be nested in another element.\n  // If the first element has children, look for a leading checkbox inside it.\n  //\n  // This only handles nesting in `<p>` elements, which is most common.\n  // It’s possible a leading checkbox might be nested in other types of flow or\n  // phrasing elements (and *deeply* nested, which is not possible with `<p>`).\n  // Limiting things to `<p>` elements keeps this simpler for now.\n  if (head && head.type === 'element' && head.tagName === 'p') {\n    const {checkbox, rest: restHead} = extractLeadingCheckbox(head)\n\n    if (checkbox) {\n      const rest = {...node, children: [restHead, ...node.children.slice(1)]}\n      return {checkbox, rest}\n    }\n  }\n\n  return {checkbox: undefined, rest: node}\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListContent} ListContent\n * @typedef {import('mdast').ListItem} ListItem\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {listItemsSpread} from '../util/list-items-spread.js'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {List}\n *   mdast node.\n */\nexport function list(state, node) {\n  const ordered = node.tagName === 'ol'\n  const children = state.toSpecificContent(state.all(node), create)\n  /** @type {number | null} */\n  let start = null\n\n  if (ordered) {\n    start =\n      node.properties && node.properties.start\n        ? Number.parseInt(String(node.properties.start), 10)\n        : 1\n  }\n\n  /** @type {List} */\n  const result = {\n    type: 'list',\n    ordered,\n    start,\n    spread: listItemsSpread(children),\n    children\n  }\n  state.patch(node, result)\n  return result\n}\n\n/**\n * @returns {ListItem}\n */\nfunction create() {\n  return {type: 'listItem', spread: false, checked: null, children: []}\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is PhrasingContent} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      'link',\n      'linkReference',\n      'strong',\n      'text'\n    ])\n  )\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').RootContent} RootContent\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchItRegistersDataFields\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {phrasing as hastPhrasing} from 'hast-util-phrasing'\nimport {whitespace} from 'hast-util-whitespace'\nimport {phrasing as mdastPhrasing} from 'mdast-util-phrasing'\n\n/**\n * Check if there are phrasing mdast nodes.\n *\n * This is needed if a fragment is given, which could just be a sentence, and\n * doesn’t need a wrapper paragraph.\n *\n * @param {Array<Nodes>} nodes\n * @returns {boolean}\n */\nexport function wrapNeeded(nodes) {\n  let index = -1\n\n  while (++index < nodes.length) {\n    const node = nodes[index]\n\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wrap runs of phrasing content into paragraphs, leaving the non-phrasing\n * content as-is.\n *\n * @param {Array<RootContent>} nodes\n *   Content.\n * @returns {Array<BlockContent>}\n *   Content where phrasing is wrapped in paragraphs.\n */\nexport function wrap(nodes) {\n  return runs(nodes, onphrasing, function (d) {\n    return d\n  })\n\n  /**\n   * @param {Array<PhrasingContent>} nodes\n   * @returns {Array<Paragraph>}\n   */\n  function onphrasing(nodes) {\n    return nodes.every(function (d) {\n      return d.type === 'text' ? whitespace(d.value) : false\n    })\n      ? []\n      : [{type: 'paragraph', children: nodes}]\n  }\n}\n\n/**\n * @param {Delete | Link} node\n * @returns {Array<BlockContent>}\n */\nfunction split(node) {\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  /**\n   * Use `parent`, put the phrasing run inside it.\n   *\n   * @param {Array<PhrasingContent>} nodes\n   * @returns {Array<BlockContent>}\n   */\n  function onphrasing(nodes) {\n    const newParent = cloneWithoutChildren(node)\n    newParent.children = nodes\n    // @ts-expect-error Assume fine.\n    return [newParent]\n  }\n\n  /**\n   * Use `child`, add `parent` as its first child, put the original children\n   * into `parent`.\n   * If `child` is not a parent, `parent` will not be added.\n   *\n   * @param {BlockContent} child\n   * @returns {BlockContent}\n   */\n  function onnonphrasing(child) {\n    if ('children' in child && 'children' in node) {\n      const newParent = cloneWithoutChildren(node)\n      const newChild = cloneWithoutChildren(child)\n      // @ts-expect-error Assume fine.\n      newParent.children = child.children\n      // @ts-expect-error Assume fine.\n      newChild.children.push(newParent)\n      return newChild\n    }\n\n    return {...child}\n  }\n}\n\n/**\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\n *\n * @param {Array<RootContent>} nodes\n *   List of input nodes.\n * @param {(nodes: Array<PhrasingContent>) => Array<BlockContent>} onphrasing\n *   Turn phrasing content into block content.\n * @param {(node: BlockContent) => BlockContent} onnonphrasing\n *   Map block content (defaults to keeping them as-is).\n * @returns {Array<BlockContent>}\n */\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  const flattened = flatten(nodes)\n  /** @type {Array<BlockContent>} */\n  const result = []\n  /** @type {Array<PhrasingContent>} */\n  let queue = []\n  let index = -1\n\n  while (++index < flattened.length) {\n    const node = flattened[index]\n\n    if (phrasing(node)) {\n      queue.push(node)\n    } else {\n      if (queue.length > 0) {\n        result.push(...onphrasing(queue))\n        queue = []\n      }\n\n      // @ts-expect-error Assume non-phrasing.\n      result.push(onnonphrasing(node))\n    }\n  }\n\n  if (queue.length > 0) {\n    result.push(...onphrasing(queue))\n    queue = []\n  }\n\n  return result\n}\n\n/**\n * Flatten a list of nodes.\n *\n * @param {Array<RootContent>} nodes\n *   List of nodes, will unravel `delete` and `link`.\n * @returns {Array<RootContent>}\n *   Unraveled nodes.\n */\nfunction flatten(nodes) {\n  /** @type {Array<RootContent>} */\n  const flattened = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      wrapNeeded(node.children)\n    ) {\n      flattened.push(...split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n/**\n * Check if an mdast node is phrasing.\n *\n * Also supports checking embedded hast fields.\n *\n * @param {Nodes} node\n *   mdast node to check.\n * @returns {node is PhrasingContent}\n *   Whether `node` is phrasing content (includes nodes with `hName` fields\n *   set to phrasing hast element names).\n */\nfunction phrasing(node) {\n  const tagName = node.data && node.data.hName\n  return tagName\n    ? hastPhrasing({type: 'element', tagName, properties: {}, children: []})\n    : mdastPhrasing(node)\n}\n\n/**\n * @template {Parents} ParentType\n *   Parent type.\n * @param {ParentType} node\n *   Node to clone.\n * @returns {ParentType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return structuredClone({...node, children: []})\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} MdastRootContent\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {EXIT, visit} from 'unist-util-visit'\nimport {wrapNeeded} from '../util/wrap.js'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Array<MdastRootContent> | Link}\n *   mdast node.\n */\nexport function media(state, node) {\n  const properties = node.properties || {}\n  const poster = node.tagName === 'video' ? String(properties.poster || '') : ''\n  let src = String(properties.src || '')\n  let index = -1\n  let linkInFallbackContent = false\n  let nodes = state.all(node)\n\n  /** @type {Root} */\n  const fragment = {type: 'root', children: nodes}\n\n  visit(fragment, function (node) {\n    if (node.type === 'link') {\n      linkInFallbackContent = true\n      return EXIT\n    }\n  })\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\n    return nodes\n  }\n\n  // Find the source.\n  while (!src && ++index < node.children.length) {\n    const child = node.children[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'source' &&\n      child.properties\n    ) {\n      src = String(child.properties.src || '')\n    }\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    /** @type {Image} */\n    const image = {\n      type: 'image',\n      title: null,\n      url: state.resolve(poster),\n      alt: toString(nodes)\n    }\n    state.patch(node, image)\n    nodes = [image]\n  }\n\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (nodes)\n\n  // Link to the media resource.\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: properties.title ? String(properties.title) : null,\n    url: state.resolve(src),\n    children\n  }\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Paragraph | undefined}\n *   mdast node.\n */\nexport function p(state, node) {\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  if (children.length > 0) {\n    /** @type {Paragraph} */\n    const result = {type: 'paragraph', children}\n    state.patch(node, result)\n    return result\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').RootContent} MdastRootContent\n *\n * @typedef {import('../state.js').State} State\n */\n\nconst defaultQuotes = ['\"']\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Array<MdastRootContent>}\n *   mdast nodes.\n */\nexport function q(state, node) {\n  const quotes = state.options.quotes || defaultQuotes\n\n  state.qNesting++\n  const contents = state.all(node)\n  state.qNesting--\n\n  const quote = quotes[state.qNesting % quotes.length]\n  const head = contents[0]\n  const tail = contents[contents.length - 1]\n  const open = quote.charAt(0)\n  const close = quote.length > 1 ? quote.charAt(1) : quote\n\n  if (head && head.type === 'text') {\n    head.value = open + head.value\n  } else {\n    contents.unshift({type: 'text', value: open})\n  }\n\n  if (tail && tail.type === 'text') {\n    tail.value += close\n  } else {\n    contents.push({type: 'text', value: close})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Strong}\n *   mdast node.\n */\nexport function strong(state, node) {\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  /** @type {Strong} */\n  const result = {type: 'strong', children}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').TableCell} TableCell\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {TableCell}\n *   mdast node.\n */\nexport function tableCell(state, node) {\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  /** @type {TableCell} */\n  const result = {type: 'tableCell', children}\n  state.patch(node, result)\n\n  if (node.properties) {\n    const rowSpan = node.properties.rowSpan\n    const colSpan = node.properties.colSpan\n\n    if (rowSpan || colSpan) {\n      const data = /** @type {Record<string, unknown>} */ (\n        result.data || (result.data = {})\n      )\n      if (rowSpan) data.hastUtilToMdastTemporaryRowSpan = rowSpan\n      if (colSpan) data.hastUtilToMdastTemporaryColSpan = colSpan\n    }\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').RowContent} RowContent\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {TableRow}\n *   mdast node.\n */\nexport function tableRow(state, node) {\n  const children = state.toSpecificContent(state.all(node), create)\n\n  /** @type {TableRow} */\n  const result = {type: 'tableRow', children}\n  state.patch(node, result)\n  return result\n}\n\n/**\n * @returns {RowContent}\n */\nfunction create() {\n  return {type: 'tableCell', children: []}\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').RowContent} RowContent\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableContent} TableContent\n * @typedef {import('mdast').Text} Text\n *\n * @typedef {import('../state.js').State} State\n *\n * @typedef Info\n *   Inferred info on a table.\n * @property {Array<AlignType>} align\n *   Alignment.\n * @property {boolean} headless\n *   Whether a `thead` is missing.\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {SKIP, visit} from 'unist-util-visit'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Table | Text}\n *   mdast node.\n */\n// eslint-disable-next-line complexity\nexport function table(state, node) {\n  // Ignore nested tables.\n  if (state.inTable) {\n    /** @type {Text} */\n    const result = {type: 'text', value: toText(node)}\n    state.patch(node, result)\n    return result\n  }\n\n  state.inTable = true\n\n  const {align, headless} = inspect(node)\n  const rows = state.toSpecificContent(state.all(node), createRow)\n\n  // Add an empty header row.\n  if (headless) {\n    rows.unshift(createRow())\n  }\n\n  let rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const row = rows[rowIndex]\n    const cells = state.toSpecificContent(row.children, createCell)\n    row.children = cells\n  }\n\n  let columns = 1\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = -1\n\n    while (++cellIndex < cells.length) {\n      const cell = cells[cellIndex]\n\n      if (cell.data) {\n        const data = /** @type {Record<string, unknown>} */ (cell.data)\n        const colSpan =\n          Number.parseInt(String(data.hastUtilToMdastTemporaryColSpan), 10) || 1\n        const rowSpan =\n          Number.parseInt(String(data.hastUtilToMdastTemporaryRowSpan), 10) || 1\n\n        if (colSpan > 1 || rowSpan > 1) {\n          let otherRowIndex = rowIndex - 1\n\n          while (++otherRowIndex < rowIndex + rowSpan) {\n            let colIndex = cellIndex - 1\n\n            while (++colIndex < cellIndex + colSpan) {\n              if (!rows[otherRowIndex]) {\n                // Don’t add rows that don’t exist.\n                // Browsers don’t render them either.\n                break\n              }\n\n              /** @type {Array<RowContent>} */\n              const newCells = []\n\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\n                newCells.push({type: 'tableCell', children: []})\n              }\n\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\n            }\n          }\n        }\n\n        // Clean the data fields.\n        if ('hastUtilToMdastTemporaryColSpan' in cell.data)\n          delete cell.data.hastUtilToMdastTemporaryColSpan\n        if ('hastUtilToMdastTemporaryRowSpan' in cell.data)\n          delete cell.data.hastUtilToMdastTemporaryRowSpan\n        if (Object.keys(cell.data).length === 0) delete cell.data\n      }\n    }\n\n    if (cells.length > columns) columns = cells.length\n  }\n\n  // Add extra empty cells.\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = cells.length - 1\n    while (++cellIndex < columns) {\n      cells.push({type: 'tableCell', children: []})\n    }\n  }\n\n  let alignIndex = align.length - 1\n  while (++alignIndex < columns) {\n    align.push(null)\n  }\n\n  state.inTable = false\n\n  /** @type {Table} */\n  const result = {type: 'table', align, children: rows}\n  state.patch(node, result)\n  return result\n}\n\n/**\n * Infer whether the HTML table has a head and how it aligns.\n *\n * @param {Readonly<Element>} node\n *   Table element to check.\n * @returns {Info}\n *   Info.\n */\nfunction inspect(node) {\n  /** @type {Info} */\n  const info = {align: [null], headless: true}\n  let rowIndex = 0\n  let cellIndex = 0\n\n  visit(node, function (child) {\n    if (child.type === 'element') {\n      // Don’t enter nested tables.\n      if (child.tagName === 'table' && node !== child) {\n        return SKIP\n      }\n\n      if (\n        (child.tagName === 'th' || child.tagName === 'td') &&\n        child.properties\n      ) {\n        if (!info.align[cellIndex]) {\n          const value = String(child.properties.align || '') || null\n\n          if (\n            value === 'center' ||\n            value === 'left' ||\n            value === 'right' ||\n            value === null\n          ) {\n            info.align[cellIndex] = value\n          }\n        }\n\n        // If there is a `th` in the first row, assume there is a header row.\n        if (info.headless && rowIndex < 2 && child.tagName === 'th') {\n          info.headless = false\n        }\n\n        cellIndex++\n      }\n      // If there is a `thead`, assume there is a header row.\n      else if (child.tagName === 'thead') {\n        info.headless = false\n      } else if (child.tagName === 'tr') {\n        rowIndex++\n        cellIndex = 0\n      }\n    }\n  })\n\n  return info\n}\n\n/**\n * @returns {RowContent}\n */\nfunction createCell() {\n  return {type: 'tableCell', children: []}\n}\n\n/**\n * @returns {TableContent}\n */\nfunction createRow() {\n  return {type: 'tableRow', children: []}\n}\n","/**\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {a} from './a.js'\nimport {base} from './base.js'\nimport {blockquote} from './blockquote.js'\nimport {br} from './br.js'\nimport {code} from './code.js'\nimport {comment} from './comment.js'\nimport {del} from './del.js'\nimport {dl} from './dl.js'\nimport {em} from './em.js'\nimport {heading} from './heading.js'\nimport {hr} from './hr.js'\nimport {iframe} from './iframe.js'\nimport {img} from './img.js'\nimport {inlineCode} from './inline-code.js'\nimport {input} from './input.js'\nimport {li} from './li.js'\nimport {list} from './list.js'\nimport {media} from './media.js'\nimport {p} from './p.js'\nimport {q} from './q.js'\nimport {root} from './root.js'\nimport {select} from './select.js'\nimport {strong} from './strong.js'\nimport {tableCell} from './table-cell.js'\nimport {tableRow} from './table-row.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {textarea} from './textarea.js'\nimport {wbr} from './wbr.js'\n\n/**\n * Default handlers for nodes.\n *\n * Each key is a node type, each value is a `NodeHandler`.\n */\nexport const nodeHandlers = {\n  comment,\n  doctype: ignore,\n  root,\n  text\n}\n\n/**\n * Default handlers for elements.\n *\n * Each key is an element name, each value is a `Handler`.\n */\nexport const handlers = {\n  // Ignore:\n  applet: ignore,\n  area: ignore,\n  basefont: ignore,\n  bgsound: ignore,\n  caption: ignore,\n  col: ignore,\n  colgroup: ignore,\n  command: ignore,\n  content: ignore,\n  datalist: ignore,\n  dialog: ignore,\n  element: ignore,\n  embed: ignore,\n  frame: ignore,\n  frameset: ignore,\n  isindex: ignore,\n  keygen: ignore,\n  link: ignore,\n  math: ignore,\n  menu: ignore,\n  menuitem: ignore,\n  meta: ignore,\n  nextid: ignore,\n  noembed: ignore,\n  noframes: ignore,\n  optgroup: ignore,\n  option: ignore,\n  param: ignore,\n  script: ignore,\n  shadow: ignore,\n  source: ignore,\n  spacer: ignore,\n  style: ignore,\n  svg: ignore,\n  template: ignore,\n  title: ignore,\n  track: ignore,\n\n  // Use children:\n  abbr: all,\n  acronym: all,\n  bdi: all,\n  bdo: all,\n  big: all,\n  blink: all,\n  button: all,\n  canvas: all,\n  cite: all,\n  data: all,\n  details: all,\n  dfn: all,\n  font: all,\n  ins: all,\n  label: all,\n  map: all,\n  marquee: all,\n  meter: all,\n  nobr: all,\n  noscript: all,\n  object: all,\n  output: all,\n  progress: all,\n  rb: all,\n  rbc: all,\n  rp: all,\n  rt: all,\n  rtc: all,\n  ruby: all,\n  slot: all,\n  small: all,\n  span: all,\n  sup: all,\n  sub: all,\n  tbody: all,\n  tfoot: all,\n  thead: all,\n  time: all,\n\n  // Use children as flow.\n  address: flow,\n  article: flow,\n  aside: flow,\n  body: flow,\n  center: flow,\n  div: flow,\n  fieldset: flow,\n  figcaption: flow,\n  figure: flow,\n  form: flow,\n  footer: flow,\n  header: flow,\n  hgroup: flow,\n  html: flow,\n  legend: flow,\n  main: flow,\n  multicol: flow,\n  nav: flow,\n  picture: flow,\n  section: flow,\n\n  // Handle.\n  a,\n  audio: media,\n  b: strong,\n  base,\n  blockquote,\n  br,\n  code: inlineCode,\n  dir: list,\n  dl,\n  dt: li,\n  dd: li,\n  del,\n  em,\n  h1: heading,\n  h2: heading,\n  h3: heading,\n  h4: heading,\n  h5: heading,\n  h6: heading,\n  hr,\n  i: em,\n  iframe,\n  img,\n  image: img,\n  input,\n  kbd: inlineCode,\n  li,\n  listing: code,\n  mark: em,\n  ol: list,\n  p,\n  plaintext: code,\n  pre: code,\n  q,\n  s: del,\n  samp: inlineCode,\n  select,\n  strike: del,\n  strong,\n  summary: p,\n  table,\n  td: tableCell,\n  textarea,\n  th: tableCell,\n  tr: tableRow,\n  tt: inlineCode,\n  u: em,\n  ul: list,\n  var: inlineCode,\n  video: media,\n  wbr,\n  xmp: code\n}\n\n/**\n * @param {State} state\n *   State.\n * @param {Parents} node\n *   Parent to transform.\n */\nfunction all(state, node) {\n  return state.all(node)\n}\n\n/**\n * @param {State} state\n *   State.\n * @param {Parents} node\n *   Parent to transform.\n */\nfunction flow(state, node) {\n  return state.toFlow(state.all(node))\n}\n\n/**\n * @returns {undefined}\n */\nfunction ignore() {}\n","/**\n * @typedef {import('hast').Comment} Comment\n *\n * @typedef {import('mdast').Html} Html\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Comment>} node\n *   hast element to transform.\n * @returns {Html}\n *   mdast node.\n */\nexport function comment(state, node) {\n  /** @type {Html} */\n  const result = {\n    type: 'html',\n    value: '<!--' + node.value + '-->'\n  }\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {wrap, wrapNeeded} from '../util/wrap.js'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<HastRoot>} node\n *   hast root to transform.\n * @returns {MdastRoot}\n *   mdast node.\n */\nexport function root(state, node) {\n  let children = state.all(node)\n\n  if (state.options.document || wrapNeeded(children)) {\n    children = wrap(children)\n  }\n\n  /** @type {MdastRoot} */\n  const result = {type: 'root', children}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Text} MdastText\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<HastText>} node\n *   hast element to transform.\n * @returns {MdastText}\n *   mdast node.\n */\nexport function text(state, node) {\n  /** @type {MdastText} */\n  const result = {type: 'text', value: node.value}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Link}\n *   mdast node.\n */\nexport function a(state, node) {\n  const properties = node.properties || {}\n  // Allow potentially “invalid” nodes, they might be unknown.\n  // We also support straddling later.\n  const children = /** @type {Array<PhrasingContent>} */ (state.all(node))\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    url: state.resolve(String(properties.href || '') || null),\n    title: properties.title ? String(properties.title) : null,\n    children\n  }\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {undefined}\n *   Nothing.\n */\nexport function base(state, node) {\n  if (!state.baseFound) {\n    state.frozenBaseUrl =\n      String((node.properties && node.properties.href) || '') || undefined\n    state.baseFound = true\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Blockquote} Blockquote\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Blockquote}\n *   mdast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Blockquote} */\n  const result = {type: 'blockquote', children: state.toFlow(state.all(node))}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Break} Break\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Break}\n *   mdast node.\n */\nexport function br(state, node) {\n  /** @type {Break} */\n  const result = {type: 'break'}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {ThematicBreak}\n *   mdast node.\n */\nexport function hr(state, node) {\n  /** @type {ThematicBreak} */\n  const result = {type: 'thematicBreak'}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Link} Link\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Link | undefined}\n *   mdast node.\n */\nexport function iframe(state, node) {\n  const properties = node.properties || {}\n  const src = String(properties.src || '')\n  const title = String(properties.title || '')\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    /** @type {Link} */\n    const result = {\n      type: 'link',\n      title: null,\n      url: state.resolve(src),\n      children: [{type: 'text', value: title}]\n    }\n    state.patch(node, result)\n    return result\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Text} Text\n *\n * @typedef {import('../util/find-selected-options.js').Options} Options\n * @typedef {import('../state.js').State} State\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\n\nconst defaultChecked = '[x]'\nconst defaultUnchecked = '[ ]'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Array<Link | Text> | Image | Text | undefined}\n *   mdast node.\n */\n// eslint-disable-next-line complexity\nexport function input(state, node) {\n  const properties = node.properties || {}\n  const value = String(properties.value || properties.placeholder || '')\n\n  if (\n    properties.disabled ||\n    properties.type === 'hidden' ||\n    properties.type === 'file'\n  ) {\n    return\n  }\n\n  if (properties.type === 'checkbox' || properties.type === 'radio') {\n    /** @type {Text} */\n    const result = {\n      type: 'text',\n      value: properties.checked\n        ? state.options.checked || defaultChecked\n        : state.options.unchecked || defaultUnchecked\n    }\n    state.patch(node, result)\n    return result\n  }\n\n  if (properties.type === 'image') {\n    const alt = properties.alt || value\n\n    if (alt) {\n      /** @type {Image} */\n      const result = {\n        type: 'image',\n        url: state.resolve(String(properties.src || '') || null),\n        title: String(properties.title || '') || null,\n        alt: String(alt)\n      }\n      state.patch(node, result)\n      return result\n    }\n\n    return\n  }\n\n  /** @type {Options} */\n  let values = []\n\n  if (value) {\n    values = [[value, undefined]]\n  } else if (\n    // `list` is not supported on these types:\n    properties.type !== 'button' &&\n    properties.type !== 'file' &&\n    properties.type !== 'password' &&\n    properties.type !== 'reset' &&\n    properties.type !== 'submit' &&\n    properties.list\n  ) {\n    const list = String(properties.list)\n    const datalist = state.elementById.get(list)\n\n    if (datalist && datalist.tagName === 'datalist') {\n      values = findSelectedOptions(datalist, properties)\n    }\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Hide password value.\n  if (properties.type === 'password') {\n    // Passwords don’t support `list`.\n    values[0] = ['•'.repeat(values[0][0].length), undefined]\n  }\n\n  if (properties.type === 'email' || properties.type === 'url') {\n    /** @type {Array<Link | Text>} */\n    const results = []\n    let index = -1\n\n    while (++index < values.length) {\n      const value = state.resolve(values[index][0])\n      /** @type {Link} */\n      const result = {\n        type: 'link',\n        title: null,\n        url: properties.type === 'email' ? 'mailto:' + value : value,\n        children: [{type: 'text', value: values[index][1] || value}]\n      }\n\n      results.push(result)\n\n      if (index !== values.length - 1) {\n        results.push({type: 'text', value: ', '})\n      }\n    }\n\n    return results\n  }\n\n  /** @type {Array<string>} */\n  const texts = []\n  let index = -1\n\n  while (++index < values.length) {\n    texts.push(\n      values[index][1]\n        ? values[index][1] + ' (' + values[index][0] + ')'\n        : values[index][0]\n    )\n  }\n\n  /** @type {Text} */\n  const result = {type: 'text', value: texts.join(', ')}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Text} Text\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Text | undefined}\n *   mdast node.\n */\nexport function select(state, node) {\n  const values = findSelectedOptions(node)\n  let index = -1\n  /** @type {Array<string>} */\n  const results = []\n\n  while (++index < values.length) {\n    const value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length > 0) {\n    /** @type {Text} */\n    const result = {type: 'text', value: results.join(', ')}\n    state.patch(node, result)\n    return result\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Text} Text\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {toText} from 'hast-util-to-text'\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Text}\n *   mdast node.\n */\nexport function textarea(state, node) {\n  /** @type {Text} */\n  const result = {type: 'text', value: toText(node)}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n *\n * @typedef {import('mdast').Text} Text\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Fix to let VS Code see references to the above types.\n''\n\n/**\n * @param {State} state\n *   State.\n * @param {Readonly<Element>} node\n *   hast element to transform.\n * @returns {Text}\n *   mdast node.\n */\nexport function wbr(state, node) {\n  /** @type {Text} */\n  const result = {type: 'text', value: '\\u200B'}\n  state.patch(node, result)\n  return result\n}\n","// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nexport const blocks = [\n  'address', // Flow content.\n  'article', // Sections and headings.\n  'aside', // Sections and headings.\n  'blockquote', // Flow content.\n  'body', // Page.\n  'br', // Contribute whitespace intrinsically.\n  'caption', // Similar to block.\n  'center', // Flow content, legacy.\n  'col', // Similar to block.\n  'colgroup', // Similar to block.\n  'dd', // Lists.\n  'dialog', // Flow content.\n  'dir', // Lists, legacy.\n  'div', // Flow content.\n  'dl', // Lists.\n  'dt', // Lists.\n  'figcaption', // Flow content.\n  'figure', // Flow content.\n  'footer', // Flow content.\n  'form', // Flow content.\n  'h1', // Sections and headings.\n  'h2', // Sections and headings.\n  'h3', // Sections and headings.\n  'h4', // Sections and headings.\n  'h5', // Sections and headings.\n  'h6', // Sections and headings.\n  'head', // Page.\n  'header', // Flow content.\n  'hgroup', // Sections and headings.\n  'hr', // Flow content.\n  'html', // Page.\n  'legend', // Flow content.\n  'li', // Block-like.\n  'li', // Similar to block.\n  'listing', // Flow content, legacy\n  'main', // Flow content.\n  'menu', // Lists.\n  'nav', // Sections and headings.\n  'ol', // Lists.\n  'optgroup', // Similar to block.\n  'option', // Similar to block.\n  'p', // Flow content.\n  'plaintext', // Flow content, legacy\n  'pre', // Flow content.\n  'section', // Sections and headings.\n  'summary', // Similar to block.\n  'table', // Similar to block.\n  'tbody', // Similar to block.\n  'td', // Block-like.\n  'td', // Similar to block.\n  'tfoot', // Similar to block.\n  'th', // Block-like.\n  'th', // Similar to block.\n  'thead', // Similar to block.\n  'tr', // Similar to block.\n  'ul', // Lists.\n  'wbr', // Contribute whitespace intrinsically.\n  'xmp' // Flow content, legacy\n]\n","export const content = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n","export const skippable = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n","/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n */\n\n/**\n * @callback Collapse\n *   Collapse a string.\n * @param {string} value\n *   Value to collapse.\n * @returns {string}\n *   Collapsed value.\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [newlines=false]\n *   Collapse whitespace containing newlines to `'\\n'` instead of `' '`\n *   (default: `false`); the default is to collapse to a single space.\n *\n * @typedef Result\n *   Result.\n * @property {boolean} remove\n *   Whether to remove.\n * @property {boolean} ignore\n *   Whether to ignore.\n * @property {boolean} stripAtStart\n *   Whether to strip at the start.\n *\n * @typedef State\n *   Info passed around.\n * @property {Collapse} collapse\n *   Collapse.\n * @property {Whitespace} whitespace\n *   Current whitespace.\n * @property {boolean | undefined} [before]\n *   Whether there is a break before (default: `false`).\n * @property {boolean | undefined} [after]\n *   Whether there is a break after (default: `false`).\n *\n * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace\n *   Whitespace setting.\n */\n\nimport {embedded} from 'hast-util-embedded'\nimport {isElement} from 'hast-util-is-element'\nimport {whitespace} from 'hast-util-whitespace'\nimport {convert} from 'unist-util-is'\nimport {blocks} from './block.js'\nimport {content as contents} from './content.js'\nimport {skippable as skippables} from './skippable.js'\n\n/** @type {Options} */\nconst emptyOptions = {}\nconst ignorableNode = convert(['doctype', 'comment'])\n\n/**\n * Minify whitespace.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeMinifyWhitespace(options) {\n  const settings = options || emptyOptions\n  const collapse = collapseFactory(\n    settings.newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    minify(tree, {collapse, whitespace: 'normal'})\n  }\n}\n\n/**\n * @param {Nodes} node\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {Result}\n *   Result.\n */\nfunction minify(node, state) {\n  if ('children' in node) {\n    const settings = {...state}\n\n    if (node.type === 'root' || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, state)\n\n    return all(node, settings)\n  }\n\n  if (node.type === 'text') {\n    if (state.whitespace === 'normal') {\n      return minifyText(node, state)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (state.whitespace === 'nowrap') {\n      node.value = state.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {ignore: ignorableNode(node), stripAtStart: false, remove: false}\n}\n\n/**\n * @param {Text} node\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {Result}\n *   Result.\n */\nfunction minifyText(node, state) {\n  const value = state.collapse(node.value)\n  const result = {ignore: false, stripAtStart: false, remove: false}\n  let start = 0\n  let end = value.length\n\n  if (state.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (state.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\n/**\n * @param {Parents} parent\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {Result}\n *   Result.\n */\nfunction all(parent, state) {\n  let before = state.before\n  const after = state.after\n  const children = parent.children\n  let length = children.length\n  let index = -1\n\n  while (++index < length) {\n    const result = minify(children[index], {\n      ...state,\n      after: collapsableAfter(children, index, after),\n      before\n    })\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {ignore: false, stripAtStart: Boolean(before || after), remove: false}\n}\n\n/**\n * @param {Array<Nodes>} nodes\n *   Nodes.\n * @param {number} index\n *   Index.\n * @param {boolean | undefined} [after]\n *   Whether there is a break after `nodes` (default: `false`).\n * @returns {boolean | undefined}\n *   Whether there is a break after the node at `index`.\n */\nfunction collapsableAfter(nodes, index, after) {\n  while (++index < nodes.length) {\n    const node = nodes[index]\n    let result = inferBoundary(node)\n\n    if (result === undefined && 'children' in node && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n/**\n * Infer two types of boundaries:\n *\n * 1. `true` — boundary for which whitespace around it does not contribute\n *    anything\n * 2. `false` — boundary for which whitespace around it *does* contribute\n *\n * No result (`undefined`) is returned if it is unknown.\n *\n * @param {Nodes} node\n *   Node.\n * @returns {boolean | undefined}\n *   Boundary.\n */\nfunction inferBoundary(node) {\n  if (node.type === 'element') {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (node.type === 'text') {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n/**\n * Infer whether a node is skippable.\n *\n * @param {Nodes} node\n *   Node.\n * @returns {boolean}\n *   Whether `node` is skippable.\n */\nfunction content(node) {\n  return embedded(node) || isElement(node, contents)\n}\n\n/**\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\n *\n * @param {Nodes} node\n *   Node.\n * @returns {boolean}\n *   Whether `node` is block-like.\n */\nfunction blocklike(node) {\n  return isElement(node, blocks)\n}\n\n/**\n * @param {Parents} node\n *   Node.\n * @returns {boolean}\n *   Whether `node` is skippable.\n */\nfunction skippable(node) {\n  return (\n    Boolean(node.type === 'element' && node.properties.hidden) ||\n    ignorableNode(node) ||\n    isElement(node, skippables)\n  )\n}\n\n/**\n * @param {string} character\n *   Character.\n * @returns {boolean}\n *   Whether `character` is removable.\n */\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n/**\n * @type {Collapse}\n */\nfunction replaceNewlines(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * @type {Collapse}\n */\nfunction replaceWhitespace() {\n  return ' '\n}\n\n/**\n * @param {Collapse} replace\n * @returns {Collapse}\n *   Collapse.\n */\nfunction collapseFactory(replace) {\n  return collapse\n\n  /**\n   * @type {Collapse}\n   */\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n/**\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\n * ignored).\n *\n * @param {Parents} node\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {Whitespace}\n *   Whitespace.\n */\nfunction inferWhiteSpace(node, state) {\n  if ('tagName' in node && node.properties) {\n    switch (node.tagName) {\n      // Whitespace in script/style, while not displayed by CSS as significant,\n      // could have some meaning in JS/CSS, so we can’t touch them.\n      case 'listing':\n      case 'plaintext':\n      case 'script':\n      case 'style':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return node.properties.noWrap ? 'nowrap' : state.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return state.whitespace\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('mdast').BlockContent} MdastBlockContent\n * @typedef {import('mdast').DefinitionContent} MdastDefinitionContent\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n * @typedef {import('mdast').RootContent} MdastRootContent\n */\n\n/**\n * @typedef {MdastBlockContent | MdastDefinitionContent} MdastFlowContent\n */\n\n/**\n * @callback All\n *   Transform the children of a hast parent to mdast.\n * @param {Parents} parent\n *   Parent.\n * @returns {Array<MdastRootContent>}\n *   mdast children.\n *\n * @callback Handle\n *   Handle a particular element.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Element} element\n *   Element to transform.\n * @param {Parents | undefined} parent\n *   Parent of `element`.\n * @returns {Array<MdastNodes> | MdastNodes | undefined | void}\n *   mdast node or nodes.\n *\n *   Note: `void` is included until TS nicely infers `undefined`.\n *\n * @callback NodeHandle\n *   Handle a particular node.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {any} node\n *   Node to transform.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<MdastNodes> | MdastNodes | undefined | void}\n *   mdast node or nodes.\n *\n *   Note: `void` is included until TS nicely infers `undefined`.\n *\n * @callback One\n *   Transform a hast node to mdast.\n * @param {Nodes} node\n *   Expected hast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<MdastNodes> | MdastNodes | undefined}\n *   mdast result.\n *\n * @typedef Options\n *   Configuration.\n * @property {string | null | undefined} [checked='[x]']\n *   Value to use for a checked checkbox or radio input (default: `'[x]'`)\n * @property {boolean | null | undefined} [document]\n *   Whether the given tree represents a complete document (optional).\n *\n *   Applies when the `tree` is a `root` node.\n *   When the tree represents a complete document, then things are wrapped in\n *   paragraphs when needed, and otherwise they’re left as-is.\n *   The default checks for whether there’s mixed content: some phrasing nodes\n *   *and* some non-phrasing nodes.\n * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers]\n *   Object mapping tag names to functions handling the corresponding elements\n *   (optional).\n *\n *   Merged into the defaults.\n * @property {boolean | null | undefined} [newlines=false]\n *   Keep line endings when collapsing whitespace (default: `false`).\n *\n *   The default collapses to a single space.\n * @property {Record<string, NodeHandle | null | undefined> | null | undefined} [nodeHandlers]\n *   Object mapping node types to functions handling the corresponding nodes\n *   (optional).\n *\n *   Merged into the defaults.\n * @property {Array<string> | null | undefined} [quotes=['\"']]\n *   List of quotes to use (default: `['\"']`).\n *\n *   Each value can be one or two characters.\n *   When two, the first character determines the opening quote and the second\n *   the closing quote at that level.\n *   When one, both the opening and closing quote are that character.\n *\n *   The order in which the preferred quotes appear determines which quotes to\n *   use at which level of nesting.\n *   So, to prefer `‘’` at the first level of nesting, and `“”` at the second,\n *   pass `['‘’', '“”']`.\n *   If `<q>`s are nested deeper than the given amount of quotes, the markers\n *   wrap around: a third level of nesting when using `['«»', '‹›']` should\n *   have double guillemets, a fourth single, a fifth double again, etc.\n * @property {string | null | undefined} [unchecked='[ ]']\n *   Value to use for an unchecked checkbox or radio input (default: `'[ ]'`).\n *\n * @callback Patch\n *   Copy a node’s positional info.\n * @param {Nodes} from\n *   hast node to copy from.\n * @param {MdastNodes} to\n *   mdast node to copy into.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback Resolve\n *   Resolve a URL relative to a base.\n * @param {string | null | undefined} url\n *   Possible URL value.\n * @returns {string}\n *   URL, resolved to a `base` element, if any.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {All} all\n *   Transform the children of a hast parent to mdast.\n * @property {boolean} baseFound\n *   Whether a `<base>` element was seen.\n * @property {Map<string, Element>} elementById\n *   Elements by their `id`.\n * @property {string | undefined} frozenBaseUrl\n *   `href` of `<base>`, if any.\n * @property {Record<string, Handle>} handlers\n *   Applied element handlers.\n * @property {boolean} inTable\n *   Whether we’re in a table.\n * @property {Record<string, NodeHandle>} nodeHandlers\n *   Applied node handlers.\n * @property {One} one\n *   Transform a hast node to mdast.\n * @property {Options} options\n *   User configuration.\n * @property {Patch} patch\n *   Copy a node’s positional info.\n * @property {number} qNesting\n *   Non-negative finite integer representing how deep we’re in `<q>`s.\n * @property {Resolve} resolve\n *   Resolve a URL relative to a base.\n * @property {ToFlow} toFlow\n *   Transform a list of mdast nodes to flow.\n * @property {<ChildType extends MdastNodes, ParentType extends MdastParents & {'children': Array<ChildType>}>(nodes: Array<MdastRootContent>, build: (() => ParentType)) => Array<ParentType>} toSpecificContent\n *   Turn arbitrary content into a list of a particular node type.\n *\n *   This is useful for example for lists, which must have list items as\n *   content.\n *   in this example, when non-items are found, they will be queued, and\n *   inserted into an adjacent item.\n *   When no actual items exist, one will be made with `build`.\n *\n * @callback ToFlow\n *   Transform a list of mdast nodes to flow.\n * @param {Array<MdastRootContent>} nodes\n *   mdast nodes.\n * @returns {Array<MdastFlowContent>}\n *   mdast flow children.\n */\n\nimport {position} from 'unist-util-position'\nimport {handlers, nodeHandlers} from './handlers/index.js'\nimport {wrap} from './util/wrap.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create a state.\n *\n * @param {Readonly<Options>} options\n *   User configuration.\n * @returns {State}\n *   State.\n */\nexport function createState(options) {\n  return {\n    all,\n    baseFound: false,\n    elementById: new Map(),\n    frozenBaseUrl: undefined,\n    handlers: {...handlers, ...options.handlers},\n    inTable: false,\n    nodeHandlers: {...nodeHandlers, ...options.nodeHandlers},\n    one,\n    options,\n    patch,\n    qNesting: 0,\n    resolve,\n    toFlow,\n    toSpecificContent\n  }\n}\n\n/**\n * Transform the children of a hast parent to mdast.\n *\n * You might want to combine this with `toFlow` or `toSpecificContent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents} parent\n *   Parent.\n * @returns {Array<MdastRootContent>}\n *   mdast children.\n */\nfunction all(parent) {\n  const children = parent.children || []\n  /** @type {Array<MdastRootContent>} */\n  const results = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    // Content -> content.\n    const result =\n      /** @type {Array<MdastRootContent> | MdastRootContent | undefined} */ (\n        this.one(child, parent)\n      )\n\n    if (Array.isArray(result)) {\n      results.push(...result)\n    } else if (result) {\n      results.push(result)\n    }\n  }\n\n  let start = 0\n  let end = results.length\n\n  while (start < end && results[start].type === 'break') {\n    start++\n  }\n\n  while (end > start && results[end - 1].type === 'break') {\n    end--\n  }\n\n  return start === 0 && end === results.length\n    ? results\n    : results.slice(start, end)\n}\n\n/**\n * Transform a hast node to mdast.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node to transform.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<MdastNodes> | MdastNodes | undefined}\n *   mdast result.\n */\nfunction one(node, parent) {\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(this.handlers, node.tagName)) {\n      return this.handlers[node.tagName](this, node, parent) || undefined\n    }\n  } else if (own.call(this.nodeHandlers, node.type)) {\n    return this.nodeHandlers[node.type](this, node, parent) || undefined\n  }\n\n  // Unknown literal.\n  if ('value' in node && typeof node.value === 'string') {\n    /** @type {MdastRootContent} */\n    const result = {type: 'text', value: node.value}\n    this.patch(node, result)\n    return result\n  }\n\n  // Unknown parent.\n  if ('children' in node) {\n    return this.all(node)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {Nodes} origin\n *   hast node to copy from.\n * @param {MdastNodes} node\n *   mdast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(origin, node) {\n  if (origin.position) node.position = position(origin)\n}\n\n/**\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} url\n *   Possible URL value.\n * @returns {string}\n *   URL, resolved to a `base` element, if any.\n */\nfunction resolve(url) {\n  const base = this.frozenBaseUrl\n\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  if (base) {\n    return String(new URL(url, base))\n  }\n\n  return url\n}\n\n/**\n * Transform a list of mdast nodes to flow.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Array<MdastRootContent>} nodes\n *   Parent.\n * @returns {Array<MdastFlowContent>}\n *   mdast flow children.\n */\nfunction toFlow(nodes) {\n  return wrap(nodes)\n}\n\n/**\n * Turn arbitrary content into a particular node type.\n *\n * This is useful for example for lists, which must have list items as content.\n * in this example, when non-items are found, they will be queued, and\n * inserted into an adjacent item.\n * When no actual items exist, one will be made with `build`.\n *\n * @template {MdastNodes} ChildType\n *   Node type of children.\n * @template {MdastParents & {'children': Array<ChildType>}} ParentType\n *   Node type of parent.\n * @param {Array<MdastRootContent>} nodes\n *   Nodes, which are either `ParentType`, or will be wrapped in one.\n * @param {() => ParentType} build\n *   Build a parent if needed (must have empty `children`).\n * @returns {Array<ParentType>}\n *   List of parents.\n */\nfunction toSpecificContent(nodes, build) {\n  const reference = build()\n  /** @type {Array<ParentType>} */\n  const results = []\n  /** @type {Array<ChildType>} */\n  let queue = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const node = nodes[index]\n\n    if (expectedParent(node)) {\n      if (queue.length > 0) {\n        node.children.unshift(...queue)\n        queue = []\n      }\n\n      results.push(node)\n    } else {\n      // Assume `node` can be a child of `ParentType`.\n      // If we start checking nodes, we’d run into problems with unknown nodes,\n      // which we do want to support.\n      const child = /** @type {ChildType} */ (node)\n      queue.push(child)\n    }\n  }\n\n  if (queue.length > 0) {\n    let node = results[results.length - 1]\n\n    if (!node) {\n      node = build()\n      results.push(node)\n    }\n\n    node.children.push(...queue)\n    queue = []\n  }\n\n  return results\n\n  /**\n   * @param {MdastNodes} node\n   * @returns {node is ParentType}\n   */\n  function expectedParent(node) {\n    return node.type === reference.type\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n *\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').RootContent} MdastRootContent\n *\n * @typedef {import('./state.js').Options} Options\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {visit} from 'unist-util-visit'\nimport {createState} from './state.js'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Transform hast to mdast.\n *\n * @param {Readonly<Nodes>} tree\n *   hast tree to transform.\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {MdastNodes}\n *   mdast tree.\n */\nexport function toMdast(tree, options) {\n  // We have to clone, cause we’ll use `rehype-minify-whitespace` on the tree,\n  // which modifies.\n  const cleanTree = structuredClone(tree)\n  const settings = options || emptyOptions\n  const transformWhitespace = rehypeMinifyWhitespace({\n    newlines: settings.newlines === true\n  })\n  const state = createState(settings)\n  /** @type {MdastNodes} */\n  let mdast\n\n  // @ts-expect-error: fine to pass an arbitrary node.\n  transformWhitespace(cleanTree)\n\n  visit(cleanTree, function (node) {\n    if (node && node.type === 'element' && node.properties) {\n      const id = String(node.properties.id || '') || undefined\n\n      if (id && !state.elementById.has(id)) {\n        state.elementById.set(id, node)\n      }\n    }\n  })\n\n  const result = state.one(cleanTree, undefined)\n\n  if (!result) {\n    mdast = {type: 'root', children: []}\n  } else if (Array.isArray(result)) {\n    // Assume content.\n    const children = /** @type {Array<MdastRootContent>} */ (result)\n    mdast = {type: 'root', children}\n  } else {\n    mdast = result\n  }\n\n  // Collapse text nodes, and fix whitespace.\n  //\n  // Most of this is taken care of by `rehype-minify-whitespace`, but\n  // we’re generating some whitespace too, and some nodes are in the end\n  // ignored.\n  // So clean up.\n  visit(mdast, function (node, index, parent) {\n    if (node.type === 'text' && index !== undefined && parent) {\n      const previous = parent.children[index - 1]\n\n      if (previous && previous.type === node.type) {\n        previous.value += node.value\n        parent.children.splice(index, 1)\n\n        if (previous.position && node.position) {\n          previous.position.end = node.position.end\n        }\n\n        // Iterate over the previous node again, to handle its total value.\n        return index - 1\n      }\n\n      node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\n\n      // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\n      // as there the whitespace matters.\n      if (\n        parent &&\n        (parent.type === 'heading' ||\n          parent.type === 'paragraph' ||\n          parent.type === 'root')\n      ) {\n        if (!index) {\n          node.value = node.value.replace(/^[\\t ]+/, '')\n        }\n\n        if (index === parent.children.length - 1) {\n          node.value = node.value.replace(/[\\t ]+$/, '')\n        }\n      }\n\n      if (!node.value) {\n        parent.children.splice(index, 1)\n        return index\n      }\n    }\n  })\n\n  return mdast\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast-util-to-mdast').Options} Options\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('unified').Processor<MdastRoot>} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new mdast tree.\n *   Discards result.\n * @param {HastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the mdast tree.\n * @param {HastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {MdastRoot}\n *   Tree (mdast).\n */\n\nimport {toMdast} from 'hast-util-to-mdast'\n\n/** @satisfies {Options} */\nconst defaults = {document: true}\n\n/**\n * Turn HTML into markdown.\n *\n * ###### Notes\n *\n * *   if a processor is given, runs the (remark) plugins used on it with an\n *     mdast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns an mdast tree, the plugins used after `rehypeRemark`\n *     are remark plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Options | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Options | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Options | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Options | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function rehypeRemark(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      const mdastTree = toMdast(tree, {...defaults, ...options})\n      await destination.run(mdastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    return /** @type {MdastRoot} */ (\n      toMdast(tree, {...defaults, ...destination})\n    )\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'extensions': {\n          // Empty.\n          break\n        }\n\n        /* c8 ignore next 4 */\n        case 'unsafe': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'join': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'handlers': {\n          map(base[key], extension[key])\n          break\n        }\n\n        default: {\n          // @ts-expect-error: matches.\n          base.options[key] = extension[key]\n        }\n      }\n    }\n  }\n\n  return base\n}\n\n/**\n * @template T\n * @param {Array<T>} left\n * @param {Array<T> | null | undefined} right\n */\nfunction list(left, right) {\n  if (right) {\n    left.push(...right)\n  }\n}\n\n/**\n * @template T\n * @param {Record<string, T>} left\n * @param {Record<string, T> | null | undefined} right\n */\nfunction map(left, right) {\n  if (right) {\n    Object.assign(left, right)\n  }\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').ConstructName} ConstructName\n * @typedef {import('./types.js').Unsafe} Unsafe\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').CompilePattern} CompilePattern\n */\n\n/**\n * @type {CompilePattern}\n */\nexport function compilePattern(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').FlowParents} FlowParents\n * @typedef {import('../types.js').FlowChildren} FlowChildren\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {FlowChildren} left\n * @param {FlowChildren} right\n * @param {FlowParents} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowParents} FlowParents\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').PhrasingParents} PhrasingParents\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {compilePattern} from './util/compile-pattern.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Nodes} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    compilePattern,\n    safe: safeBound,\n    stack: [],\n    unsafe: [...unsafe],\n    join: [...join],\n    // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined\n    // here.\n    handlers: {...handlers},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: add `handle` in a second.\n    handle: undefined\n  }\n\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    state.join.push(joinDefinition)\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    /**\n     * @returns {undefined}\n     */\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction unknown(value) {\n  // Always a node.\n  const node = /** @type {Nodes} */ (value)\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').PhrasingParents} PhrasingParents\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * Throw a given error.\n *\n * @param {Error | null | undefined} [error]\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: any[]) => void} Callback\n * @typedef {(...input: any[]) => any} Middleware\n *\n * @typedef {(...input: any[]) => void} Run Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Middleware[]} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {any[]} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @param {any[]} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware(...parameters)\n    } catch (error) {\n      /** @type {Error} */\n      const exception = error\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","import fixGoogleHtml from './fix-google-html.js';\n// rehype-dom-parse is a lightweight version of rehype-parse that leverages\n// browser APIs -- reduces bundle size by ~200 kB!\nimport parse from 'rehype-dom-parse';\nimport { defaultHandlers } from 'hast-util-to-mdast';\nimport rehype2remarkWithSpaces from './rehype-to-remark-with-spaces.js';\nimport remarkGfm from 'remark-gfm';\nimport stringify from 'remark-stringify';\nimport { unified } from 'unified';\n\n/** @typedef {import(\"mdast-util-to-markdown\").State} MdastState */\n/** @typedef {import(\"unist\").Node} UnistNode */\n/** @typedef {import(\"hast-util-to-mdast\").Handle} Handle */\n\n/** @type {Handle} */\nfunction preserveTagAndConvertContents (state, node, _parent) {\n  return [\n    { type: 'html', value: `<${node.tagName}>` },\n    ...state.all(node),\n    { type: 'html', value: `</${node.tagName}>` },\n  ];\n}\n\nfunction unwrapBold(node) {\n  if (node.children.length === 1 && ['strong', 'title'].includes(node.children[0].tagName)) {\n    // Recursive unwrap in case there's another one hidden in there\n    return unwrapBold({ ...node, children: node.children[0].children });\n  } else {\n    return node;\n  }\n}\n\nfunction removeEmpty(state, node, _parent) {\n  if (node.children.length === 0) return null\n  return defaultHandlers[node.tagName](state, node)\n}\n\n/** @type {Handle} */\nfunction headingWithId (state, node, _parent) {\n  const num = parseInt(node.tagName.slice(1))\n  const nextNum = num + 1\n  const nextHeading = 'h' + nextNum\n  const newNode = defaultHandlers[nextHeading](state, { ...unwrapBold(node), tagName: nextHeading })\n\n  if (false && node.properties?.id) {\n    newNode.children?.push({\n      type: 'html',\n      value: `<a id=\"${node.properties.id}\"></a>`\n    });\n  }\n\n  return newNode;\n}\n\nfunction titleToH1 (state, node, _parent) {\n  return defaultHandlers.h1(state, { ...node, tagName: 'h1' })\n}\n\n/**\n * Use two blank lines before headings. This is a \"join\" function, which tells\n * remark-stringify how to join adjacent nodes.\n * @param {UnistNode} previous\n * @param {UnistNode} next\n * @param {UnistNode} _parent\n * @param {MdastState} _state\n * @returns {boolean|number|void}\n */\nfunction doubleBlankLinesBeforeHeadings (previous, next, parent, _state) {\n  if (previous.type !== 'heading' && next.type === 'heading') {\n    return 2;\n  }\n  if (previous.type === 'list' && next.type === 'list' && previous.ordered === next.ordered) {\n    return 0;\n  }\n  if (previous.type === 'listItem' && next.type === 'listItem') {\n    return 0;\n  }\n  if (\n    next.type === 'list' &&\n    previous.type === 'paragraph' &&\n    parent.type === 'listItem'\n  ) {\n    console.log(previous, next)\n    return 0;\n  }\n  return undefined;\n}\n\nconst processor = unified()\n  .use(parse)\n  .use(fixGoogleHtml)\n  // .use(require('./lib/log-tree').default)\n  .use(rehype2remarkWithSpaces, {\n    handlers: {\n      // Preserve sup/sub markup; most Markdowns have no markup for it.\n      sub: preserveTagAndConvertContents,\n      sup: preserveTagAndConvertContents,\n      table: preserveTagAndConvertContents,\n      tr: preserveTagAndConvertContents,\n      td: preserveTagAndConvertContents,\n      th: preserveTagAndConvertContents,\n      title: titleToH1,\n      h1: headingWithId,\n      h2: headingWithId,\n      h3: headingWithId,\n      h4: headingWithId,\n      h5: headingWithId,\n      h6: headingWithId,\n      strong: removeEmpty,\n      em: removeEmpty,\n    }\n  })\n  .use(remarkGfm)\n  .use(stringify, {\n    bullet: '-',\n    emphasis: '*',\n    fences: true,\n    listItemIndent: 'one',\n    strong: '*',\n    join: [doubleBlankLinesBeforeHeadings],\n    tightDefinitions: true,\n    rule: '-',\n  });\n\n/**\n * Parse a Google Docs Slice Clip (the Google Docs internal format for\n * representing copied documents or selections from a document). This parses a\n * string representing the document and unwraps it if enclosed in a wrapper\n * object. You can pass in a string or object.\n * @param {any} raw\n * @returns {any}\n */\nfunction parseGdocsSliceClip(raw) {\n  const wrapper = typeof raw === 'string' ? JSON.parse(raw) : raw;\n  const data = typeof wrapper.data === 'string' ? JSON.parse(wrapper.data) : wrapper.data;\n\n  // Do a basic check to ensure we are dealing with what we think we are. This\n  // is not meant to be exhaustive or to check the exact schema.\n  if (\n    typeof data?.resolved?.dsl_entitypositionmap !== 'object'\n    || typeof data?.resolved?.dsl_spacers !== 'string'\n    || !Array.isArray(data?.resolved?.dsl_styleslices)\n  ) {\n    throw new SyntaxError(`Document does not appear to be a GDocs Slice Clip: ${JSON.stringify(raw)}`);\n  }\n\n  return data;\n}\n\nfunction fixOffsetLinks(md) {\n  return md.replace(/\\[ ([^\\]]+)\\]/g, ' [$1]')\n}\n\nfunction fixNoTitle(md) {\n  if (/^# \\w+/m.exec(md)) {\n    return md\n  } else {\n    return md.replace(/^#(#+) /mg, '$1 ')\n  }\n}\n\nexport function convertDocsHtmlToMarkdown(html, rawSliceClip) {\n  const sliceClip = rawSliceClip ? parseGdocsSliceClip(rawSliceClip) : null;\n  return processor.process({\n    value: html,\n    data: {\n      sliceClip\n    }\n  }).then(result => result.value).then(fixOffsetLinks).then(fixNoTitle);\n}\n","import rehypeRemark from 'rehype-remark';\n\n/**\n * The official rehype-remark plugin gets a little aggeressive with removing\n * spaces, so this wraps it with some space preservation.\n *\n * Ideally, this needs to be solved upstream in rehype-remark.\n * TODO: create a minimal test case and file a bug there!\n */\nexport default function rehype2remarkWithSpaces () {\n  const spaceToken = '++IAMASPACE++';\n\n  function preserveInitialSpaces (node) {\n    if (node.type === 'text' && node.value.startsWith(' ')) {\n      if (node.value.startsWith(' ')) {\n        node.value = spaceToken + node.value.slice(1);\n      }\n      if (node.value.endsWith(' ')) {\n        node.value = node.value.slice(0, -1) + spaceToken;\n      }\n    }\n    if (node.children) {\n      node.children.forEach(preserveInitialSpaces);\n    }\n  }\n\n  function recreateSpaces (node) {\n    if (node.value && typeof node.value === 'string') {\n      node.value = node.value.split(spaceToken).join(' ');\n    }\n    if (node.children) {\n      node.children.forEach(recreateSpaces);\n    }\n  }\n\n  const convert = rehypeRemark.apply(this, arguments);\n  return function (tree, file) {\n    preserveInitialSpaces(tree);\n    const markdownTree = convert.apply(this, [tree, file]);\n    recreateSpaces(markdownTree);\n    return markdownTree;\n  };\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * Add support for serializing to markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkStringify(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree) {\n    return toMarkdown(tree, {\n      ...self.data('settings'),\n      ...options,\n      // Note: this option is not in the readme.\n      // The goal is for it to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('toMarkdownExtensions') || []\n    })\n  }\n}\n","import { convertDocsHtmlToMarkdown } from './lib/convert.js';\nimport debug from 'debug'\n\nconst SLICE_CLIP_MEDIA_TYPE = 'application/x-vnd.google-docs-document-slice-clip';\n\nconst log = debug('app:index:debug')\n\nconst inputElement = document.getElementById('input');\nconst outputElement = document.getElementById('output');\nconst inputInstructions = document.querySelector('#input-area .instructions');\nconst outputInstructions = document.querySelector('#output-area .instructions');\n\n// Hold most recently pasted Slice Clip (the Google Docs internal copy/paste\n// format) globally so we can re-use it if the user hand-edits the input.\nlet latestSliceClip = null\ninputElement.addEventListener('paste', event => {\n  if (!event.clipboardData) {\n    console.warn('Could not access clipboard data from paste event');\n    return;\n  }\n\n  // Allow for raw or wrapped slice clips (one uses a \"+wrapped\" suffix).\n  const sliceClipType = event.clipboardData.types.find(type =>\n    type.startsWith(SLICE_CLIP_MEDIA_TYPE)\n  );\n  log('Slice clip media type: %s', sliceClipType);\n  if (sliceClipType) {\n    const sliceClip = event.clipboardData.getData(sliceClipType);\n    log('raw slice clip: %s', sliceClip);\n    latestSliceClip = sliceClip;\n  }\n});\n\ninputElement.addEventListener('input', () => {\n  const hasContent = !!inputElement.textContent;\n  inputInstructions.style.display = hasContent ? 'none' : '';\n\n  convertDocsHtmlToMarkdown(inputElement.innerHTML, latestSliceClip)\n    .then(markdown => {\n      outputElement.value = markdown;\n      outputInstructions.style.display = markdown.trim() ? 'none' : '';\n    })\n    .catch(error => {\n      console.error(error);\n      outputInstructions.style.display = '';\n    });\n});\n\nwindow.convertDocsHtmlToMarkdown = convertDocsHtmlToMarkdown;\n\nconst copyButton = document.getElementById('copy-button');\nif (navigator.clipboard && navigator.clipboard.writeText) {\n  copyButton.style.display = '';\n  copyButton.addEventListener('click', () => {\n    navigator.clipboard.writeText(outputElement.value).catch((error) => {\n      alert(`Unable to copy markdown to clipboard: ${error}`);\n    });\n  });\n}\n\nconst downloadButton = document.getElementById('download-button');\nif (window.URL && window.File) {\n  downloadButton.style.display = '';\n  downloadButton.addEventListener('click', () => {\n    const file = new File([outputElement.value], 'Converted Text.md', {\n      type: 'text/markdown',\n    });\n\n    // Make a link to the file and click it to trigger a download. Chrome has a\n    // fancy API for opening a save dialog, but other browsers do not, and this\n    // is the most universal way to download a file created in the front-end.\n    let url, link;\n    try {\n      url = URL.createObjectURL(file);\n      link = document.createElement('a');\n      link.href = url;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n    }\n    finally {\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  });\n}\n"],"names":["exports","formatArgs","args","this","useColors","namespace","module","humanize","diff","c","color","splice","index","lastC","replace","match","save","namespaces","storage","setItem","removeItem","error","load","r","getItem","process","env","DEBUG","window","type","__nwjs","navigator","userAgent","toLowerCase","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","parseInt","RegExp","$1","localStorage","localstorage","destroy","warned","warn","colors","log","debug","formatters","j","v","JSON","stringify","message","createDebug","prevTime","namespacesCache","enabledCache","enableOverride","enabled","self","curr","Number","Date","ms","prev","coerce","unshift","format","formatter","val","call","apply","selectColor","extend","Object","defineProperty","enumerable","configurable","get","set","init","delimiter","newDebug","toNamespace","regexp","toString","substring","length","default","Error","stack","disable","names","map","skips","join","enable","i","split","len","push","slice","name","test","keys","forEach","key","hash","charCodeAt","Math","abs","hasOwn","prototype","hasOwnProperty","toStr","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","value","newValue","writable","getProperty","src","copy","copyIsArray","clone","arguments","deep","s","m","h","d","plural","msAbs","n","isPlural","round","str","String","exec","parseFloat","parse","isFinite","long","fmtShort","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","o","prop","Symbol","toStringTag","Schema","property","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","DefinedInfo","mask","super","mark","values","own","create","info","properties","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextMenu","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","token","tokens","input","indexOf","trim","search","valid","dash","cap","kebab","$0","camelcase","charAt","toUpperCase","buttonTypes","Set","createH","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","selector","children","node","child","props","previous","tagName","lastIndex","subvalue","parseSelector","has","addProperty","addChild","Type","datasetToProperty","datasetToAttribute","find","isNaN","parsePrimitive","concat","finalResult","nodes","convert","ok","castFactory","tests","parameters","anyFactory","check","checkAsRecord","nodeAsRecord","propsFactory","testFunction","parent","Boolean","looksLikeANode","empty","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","regex","BananaSlug","occurrences","reset","slug","maintainCase","originalSlug","isBlank","getResolvedStyleProperty","propertyName","ancestors","_resolvedStyle","_style","groups","parseCssPropertyList","getNodeStyle","parentAncestors","resolveNodeStyle","Proxy","_receiver","blockElements","spaceSensitiveElements","isList","isBlock","isSpaceSensitive","isCell","isAnchor","spaceAtStartPattern","spaceAtEndPattern","wrapChildren","wrapper","unwrapLineBreaks","removeLineBreaksBeforeBlocks","_extractInvalidSpace","totalSpace","spaceMatch","body","getNodeTextAlignment","alignMatch","isAllTextCode","hasText","childResult","hasCodeNewline","hasNewline","textContent","innerText","createCodeBlocks","codeBlocks","some","every","activeCodeBlock","block","contents","flatMap","isChecklistItem","getTextContent","webNamespaces","mathml","transformed","nodeType","namespaceURI","fn","getAttributeNames","getAttribute","nodeValue","comment","root","one","afterTransform","childNodes","createFragment","createDocument","DOMParser","parseFromString","findAfter","POSITIVE_INFINITY","isElement","element","context","convertElement","looksLikeAnElement","searchLineFeeds","searchTabOrSpaces","cell","p","row","notRendered","blockOrCaption","toText","whitespace","inferWhitespace","breakBefore","breakAfter","collectText","renderedTextCollection","count","repeat","suffix","items","collectElement","collectPreText","lines","trimAndCollapseSpacesAndTabs","trimTrailingLines","codePointAt","state","classList","meta","patch","del","all","listItemsSpread","spread","handle","listItems","toSpecificContent","ordered","em","heading","depth","img","url","resolve","inlineCode","findSelectedOptions","selectedOptions","findOptions","option","embedded","basic","phrasing","isBodyOkLink","hasProperty","li","rest","checkbox","extractLeadingCheckbox","spreadout","toFlow","seenFlow","head","restHead","emptyOptions","settings","includeImageAlt","includeHtml","globalThis","deserialize","serialized","$","out","unpair","source","flags","Map","add","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","entry","TypeError","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","re","thing","wrapNeeded","runs","newParent","cloneWithoutChildren","newChild","onphrasing","onnonphrasing","flattened","flatten","queue","hName","linkInFallbackContent","image","defaultQuotes","strong","tableCell","hastUtilToMdastTemporaryRowSpan","hastUtilToMdastTemporaryColSpan","createCell","createRow","nodeHandlers","doctype","ignore","handlers","applet","area","basefont","bgsound","caption","col","colgroup","command","datalist","dialog","embed","frameset","isindex","keygen","math","menu","menuitem","nextid","noembed","noframes","optgroup","param","script","shadow","spacer","template","track","acronym","bdi","bdo","big","blink","button","canvas","details","dfn","font","ins","marquee","meter","nobr","noscript","output","progress","rb","rbc","rp","rt","rtc","ruby","small","sup","sub","tbody","tfoot","thead","time","address","flow","article","aside","center","div","fieldset","figcaption","figure","footer","header","hgroup","legend","main","multicol","nav","picture","section","a","audio","b","base","baseFound","frozenBaseUrl","blockquote","br","dl","clean","group","titles","dt","dd","h1","h2","h3","h4","h5","h6","hr","iframe","unchecked","elementById","texts","kbd","listing","ol","plaintext","pre","q","quotes","qNesting","quote","tail","close","samp","select","strike","inTable","headless","rowIndex","cellIndex","inspect","cells","columns","otherRowIndex","colIndex","newCells","alignIndex","td","textarea","th","tr","tt","u","ul","var","video","wbr","xmp","blocks","skippable","ignorableNode","rehypeMinifyWhitespace","collapse","collapseFactory","newlines","replaceNewlines","replaceWhitespace","minify","blocklike","before","after","inferWhiteSpace","collapsableAfter","remove","stripAtStart","removable","minifyText","inferBoundary","character","pointEnd","point","pointStart","position","line","column","dataMdast","URL","build","reference","expectedParent","toMdast","cleanTree","transformWhitespace","createState","mdast","defaults","rehypeRemark","destination","file","mdastTree","run","ccount","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","fromCharCode","toExpression","toFunction","inConstruct","notInConstruct","enterLiteralAutolink","enter","enterLiteralAutolinkValue","config","autolinkProtocol","exitLiteralAutolinkHttp","exit","exitLiteralAutolinkWww","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","ignored","pairs","tupleOrList","tuple","toPairs","pairIndex","grandparent","siblings","change","matchObject","global","findAndReplace","findUrl","findEmail","protocol","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","normalizeIdentifier","enterFootnoteDefinition","identifier","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","tracker","createTracker","move","subexit","safe","associationId","current","footnoteDefinition","shift","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","patternInScope","listInScope","none","hardBreak","_1","unsafe","formatCodeAsIndented","fences","checkQuote","marker","emphasis","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","imageReference","referenceType","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","resourceLink","linkReference","checkBullet","bullet","checkRule","rule","checkStrong","break","fence","checkFence","expected","longestStreak","encode","rank","lastIndexOf","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","checkListItemIndent","incrementListMarker","ceil","paragraph","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","tableRow","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","chunkStart","syntaxExtension","extension","hook","left","right","constructs","existing","wwwPrefix","tokenize","effects","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","factorySpace","limit","blankLine","indent","tokenizePotentialGfmFootnoteCall","parser","gfmFootnotes","labelStart","now","resolveToPotentialGfmFootnoteCall","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","editMap","at","addImpl","sort","vecs","pop","gfmTableAlign","inDelimiterRow","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","spaceThenNonSpace","configure","extensions","fullPhrasingSpans","createElement","characterEscapeOrReference","decode","$2","hex","decodeNumericCharacterReference","characterReference","innerHTML","decodeNamedCharacterReference","association","_compiled","between","eol","numerical","escapeBackslashes","positions","whole","lineShift","chunks","toMarkdown","containerPhrasingBound","containerFlowBound","safeBound","tightDefinitions","joinDefinition","invalid","unknown","zwitch","infos","bail","getPrototypeOf","iterator","pos","VFileMessage","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","cause","ruleId","fatal","actual","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","proc","isUrl","fileUrlOrPath","auth","VFile","isUint8Array","cwd","history","messages","stored","assertNonEmpty","assertPart","stem","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","fail","encoding","TextDecoder","part","sep","CallableInstance","proto","func","setPrototypeOf","getOwnPropertyNames","descriptor","Processor","Compiler","Parser","attachers","compiler","freezeIndex","frozen","transformers","fns","pipeline","middlewareIndex","callback","middleware","fnExpectsCallback","done","Promise","then","use","middelware","trough","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","asyncName","looksLikeAVFile","preserveTagAndConvertContents","_parent","unwrapBold","removeEmpty","headingWithId","nextHeading","processor","unified","doc","fragment","_file","isStyled","weight","verticalAlign","decorationLine","startsWith","childrenCount","convertInlineStylesToElements","_index","newChildren","activeNode","mergeConsecutiveInlineStyles","nextIndex","startSpace","endSpace","moveSpaceOutsideSensitiveChildren","fixNestedLists","alignment","childAlignment","detectTableColumnAlignment","endingBr","beginningBr","moveLinebreaksOutsideOfAnchors","fixChecklists","sliceClip","internalHeadings","resolved","dsl_styleslices","styleslice","stsl_type","stsl_styles","ps_hdid","level","ps_hd","headings","slugger","headingIdMap","internalHeading","newId","_error","host","internalHeadingId","fixInternalLinks","spaceToken","preserveInitialSpaces","endsWith","recreateSpaces","markdownTree","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","combineExtensions","continuation","resolveTo","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","delete","gfmToMarkdown","_state","fixOffsetLinks","md","fixNoTitle","convertDocsHtmlToMarkdown","rawSliceClip","dsl_entitypositionmap","dsl_spacers","SyntaxError","parseGdocsSliceClip","inputElement","getElementById","outputElement","inputInstructions","querySelector","outputInstructions","latestSliceClip","addEventListener","clipboardData","sliceClipType","types","getData","hasContent","markdown","catch","copyButton","clipboard","writeText","alert","downloadButton","File","createObjectURL","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}